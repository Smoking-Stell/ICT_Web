{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0433\u043b\u0430\u0432\u043d\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u043a \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c! \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4 \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438","title":"Home"},{"location":"Lab1/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket IP = \"127.0.0.1\" PORT = 44455 def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.bind((IP, PORT)) while True: data, addr = server_socket.recvfrom(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}: {data.decode()}\") response = \"Hello, client\" server_socket.sendto(response.encode(), addr) if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: import socket SERVER_IP = \"127.0.0.1\" SERVER_PORT = 44455 def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) message = \"Hello, server\" client_socket.sendto(message.encode(), (SERVER_IP, SERVER_PORT)) data, addr = client_socket.recvfrom(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}: {data.decode()}\") if __name__ == \"__main__\": main() \u0420\u0430\u0431\u043e\u0442\u0430: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435: \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043e\u0436\u0438\u0434\u0430\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u043c\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435: 2 \u043a\u0430\u0442\u0435\u0442\u0430 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043e\u0442\u0432\u0435\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import math IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def solve_hypotenuse(a, b): return math.sqrt(a ** 2 + b ** 2) def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((IP, PORT)) server_socket.listen(10) while True: try: outer_socket, addr = server_socket.accept() received_string = outer_socket.recv(1024).decode(codage) a, b = map(float, received_string.split()) result = solve_hypotenuse(a, b) outer_socket.send(str(result).encode(codage)) except KeyboardInterrupt: server_socket.close() break if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: import socket IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((IP, PORT)) inp_string = input(\"Enter the length of two legs: \").encode(codage) client_socket.send(inp_string) result = client_socket.recv(1024).decode(codage) print(f\"Hypotenuse length: {result}\") client_socket.close() if __name__ == \"__main__\": main() \u0420\u0430\u0431\u043e\u0442\u0430: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u043e\u0442\u0432\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0442\u0432\u0435\u0442\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import math IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((IP, PORT)) server_socket.listen(10) while True: try: outer_socket, addr = server_socket.accept() request = outer_socket.recv(1024).decode(codage) print(request) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" with open(\"index.html\", \"r\") as f: body = f.read() response = response_type + headers + body outer_socket.send(response.encode(codage)) outer_socket.close() except KeyboardInterrupt: server_socket.close() break if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f: import socket IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((IP, PORT)) request = \"GET / HTTP/1.1\\r\\nHost: %s\" % IP client_socket.sendall(request.encode(codage)) result = client_socket.recv(1024).decode(codage) print(result) client_socket.close() if __name__ == \"__main__\": main() \u0421\u0430\u0439\u0442: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Pizza</title> </head> <body> </body> </html> \u0420\u0430\u0431\u043e\u0442\u0430: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u0418 \u043f\u0440\u0438\u0435\u043c, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c: \u043e\u0434\u0438\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0442\u0440\u0435\u0434\u0430 \u043f\u043e\u0434 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0437\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0438\u043c \u0432\u0441\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import threading IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' clients = [] client_names = {} def elim_client(client_socket): client_socket.close() if client_socket in clients: clients.remove(client_socket) if client_socket in client_names: del client_names[client_socket] def sharing_message(message, sender_socket): for client in clients: if client != sender_socket: try: client.send(message) except: elim_client(client) def handle_client(client_socket): name = client_socket.recv(1024).decode(codage) client_names[client_socket] = name print(f\"{name} has joined the chat!\") welcome_msg = f\"{name} has joined the chat!\".encode(codage) sharing_message(welcome_msg, client_socket) while True: try: message = client_socket.recv(1024) formatted_message = f\"{name}: {message.decode(codage)}\".encode( codage) sharing_message(formatted_message, client_socket) except: print(f\"{name} has left the chat!\") leave_msg = f\"{name} has left the chat!\".encode(codage) sharing_message(leave_msg, None) elim_client(client_socket) break def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((IP, PORT)) server_socket.listen(15) print(f\"Server listening on {IP}:{PORT}...\") while True: client_socket, addr = server_socket.accept() clients.append(client_socket) client_thread = threading.Thread(target=handle_client, args=(client_socket,)) client_thread.start() if __name__ == \"__main__\": main() \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430: import socket import threading IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def receive(client_socket): while True: message = client_socket.recv(1024).decode(codage) print(message) def send(client_socket): while True: message = input() client_socket.send(message.encode(codage)) def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((IP, PORT)) username = input(\"Enter your username: \") client_socket.send(username.encode(codage)) receive_thread = threading.Thread(target=receive, args = (client_socket, )) send_thread = threading.Thread(target=send, args = (client_socket, )) receive_thread.start() send_thread.start() if __name__ == \"__main__\": main() \u0420\u0430\u0431\u043e\u0442\u0430: \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0448\u0430\u0431\u043b\u043e\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u044f send_response \u0438 parse_headers \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430: import socket import sys class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, ip, port, codage): self.ip = ip self.port = port self.grades = {} self.codage = codage def serve_forever(self): #1. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((self.ip, self.port)) server_socket.listen(10) while True: client_socket, addr = server_socket.accept() self.serve_client(client_socket) def serve_client(self, client_socket): # 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f data = client_socket.recv(1024).decode(self.codage) try: request = self.parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) except Exception as e: error_msg = \"HTTP/1.1 400 Bad Request\\n\\n\" client_socket.send(error_msg.encode('utf-8')) finally: client_socket.close() def parse_request(self, data): # 3. \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 http+\u0437\u0430\u043f\u0440\u043e\u0441\u0430. # Python, \u0441\u043e\u043a\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043e\u043a\u0440\u0443\u0433 \u043d\u0435\u0433\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u0431\u0435\u0440\u0442\u043a\u0443, # \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 file object \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u042d\u0442\u043e \u0434\u0430\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441. # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0432\u0441\u0435\u0433\u0434\u0430 - \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430. \u041f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (\u043c\u0435\u0442\u043e\u0434 + url + \u0432\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430). # URL \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b (isu.ifmo.ru/pls/apex/f?p=2143 , # \u0433\u0434\u0435 isu.ifmo.ru/pls/apex/f, \u0430 p=2143 - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 p \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 2143) lines = data.split('\\r\\n') headers = lines[0].split() print(f\"Headers : {headers}, {len(headers)}\") if len(headers) != 3: raise Exception(\"Bad request line\") body = lines[-1] print(body) grds = {} if \":\" in body: grds = {grade.split(\":\")[0]: grade.split(\":\")[1] for grade in body.split(\";\")} request = {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2], \"grades\": grds} return request def handle_request(self, request): # 5. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. # \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0443\u0441\u043b\u043e\u0432\u0438\u0439, # \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. # GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. # POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. if request[\"method\"] == \"POST\": for subject, grade in request[\"grades\"].items(): if subject not in self.grades: self.grades[subject] = [] self.grades[subject].extend(grade) #with open('index.html', 'r') as f: return f\"HTTP/1.1 200 OK\\n\\n\" elif request[\"method\"] == \"GET\": response = f\"HTTP/1.1 200 OK\\n\\n\" \\ + \"<html><head><title>Grades</title></head><body>\" response += \"<table border='1'>\" response += \"<tr><th>Subject</th><th>Grades</th></tr>\" for subject, grades in self.grades.items(): grades_str = \", \".join(map(str, grades)) response += f\"<tr><td>{subject}</td><td>{grades_str}</td></tr>\" response += \"</table>\" response += \"</body></html>\" return response else: return \"HTTP/1.1 405 Something wrong with request\\n\\n\" #def send_response(self, *): # 6. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. if __name__ == '__main__': IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' serv = MyHTTPServer(IP, PORT, codage) try: serv.serve_forever() except KeyboardInterrupt: pass POST \u0437\u0430\u043f\u0440\u043e\u0441: import socket def test_post_request(): IP = \"127.0.0.1\" PORT = 44455 grades = { 'Math2': '\u0421', 'PE': 'C' } data = ';'.join([f\"{key}:{value}\" for key, value in grades.items()]) headers = f\"POST / HTTP/1.1\\r\\nContent-Length: {len(data)}\\r\\n\\r\\n{data}\" test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) test_socket.connect((IP, PORT)) test_socket.sendall(headers.encode()) response = test_socket.recv(1024) print(\"Response:\\n\", response.decode()) if __name__ == \"__main__\": test_post_request() GET \u0437\u0430\u043f\u0440\u043e\u0441: import socket IP = \"127.0.0.1\" PORT = 44455 def test_get_request(): request = f\"GET / HTTP/1.1\\r\\nHost: {IP}\\r\\n\\r\\n\" test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) test_socket.connect((IP, PORT)) test_socket.sendall(request.encode()) response = test_socket.recv(1024) print(\"Response:\\n\", response.decode()) if __name__ == \"__main__\": test_get_request() \u0420\u0430\u0431\u043e\u0442\u0430 \u0412\u044b\u0432\u043e\u0434 \u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438, TCP, UDP, HTTP \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f1"},{"location":"Lab1/#no1","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161"},{"location":"Lab1/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043a\u0435\u0442\u043e\u0432.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab1/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"Lab1/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab1/#_3","text":"import socket IP = \"127.0.0.1\" PORT = 44455 def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.bind((IP, PORT)) while True: data, addr = server_socket.recvfrom(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}: {data.decode()}\") response = \"Hello, client\" server_socket.sendto(response.encode(), addr) if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430:"},{"location":"Lab1/#_4","text":"import socket SERVER_IP = \"127.0.0.1\" SERVER_PORT = 44455 def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) message = \"Hello, server\" client_socket.sendto(message.encode(), (SERVER_IP, SERVER_PORT)) data, addr = client_socket.recvfrom(1024) print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}: {data.decode()}\") if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:"},{"location":"Lab1/#_5","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u0430:"},{"location":"Lab1/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"Lab1/#_6","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435: \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab1/#_7","text":"\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b, \u043e\u0436\u0438\u0434\u0430\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u043c\u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435: 2 \u043a\u0430\u0442\u0435\u0442\u0430 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043e\u0442\u0432\u0435\u0442.","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"Lab1/#_8","text":"import socket import math IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def solve_hypotenuse(a, b): return math.sqrt(a ** 2 + b ** 2) def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((IP, PORT)) server_socket.listen(10) while True: try: outer_socket, addr = server_socket.accept() received_string = outer_socket.recv(1024).decode(codage) a, b = map(float, received_string.split()) result = solve_hypotenuse(a, b) outer_socket.send(str(result).encode(codage)) except KeyboardInterrupt: server_socket.close() break if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430:"},{"location":"Lab1/#_9","text":"import socket IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((IP, PORT)) inp_string = input(\"Enter the length of two legs: \").encode(codage) client_socket.send(inp_string) result = client_socket.recv(1024).decode(codage) print(f\"Hypotenuse length: {result}\") client_socket.close() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:"},{"location":"Lab1/#_10","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u0430:"},{"location":"Lab1/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"Lab1/#_11","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab1/#_12","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0446\u0438\u043a\u043b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u043e\u0442\u0432\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043e\u0442\u0432\u0435\u0442\u0430","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"Lab1/#_13","text":"import socket import math IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((IP, PORT)) server_socket.listen(10) while True: try: outer_socket, addr = server_socket.accept() request = outer_socket.recv(1024).decode(codage) print(request) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" with open(\"index.html\", \"r\") as f: body = f.read() response = response_type + headers + body outer_socket.send(response.encode(codage)) outer_socket.close() except KeyboardInterrupt: server_socket.close() break if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430:"},{"location":"Lab1/#_14","text":"import socket IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((IP, PORT)) request = \"GET / HTTP/1.1\\r\\nHost: %s\" % IP client_socket.sendall(request.encode(codage)) result = client_socket.recv(1024).decode(codage) print(result) client_socket.close() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:"},{"location":"Lab1/#_15","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Pizza</title> </head> <body> </body> </html>","title":"\u0421\u0430\u0439\u0442:"},{"location":"Lab1/#_16","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u0430:"},{"location":"Lab1/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"Lab1/#_17","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u0418 \u043f\u0440\u0438\u0435\u043c, \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab1/#_18","text":"\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0432\u0441\u0435\u0445 \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c: \u043e\u0434\u0438\u043d \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0442\u0440\u0435\u0434\u0430 \u043f\u043e\u0434 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0437\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0438\u043c \u0432\u0441\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435:"},{"location":"Lab1/#_19","text":"import socket import threading IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' clients = [] client_names = {} def elim_client(client_socket): client_socket.close() if client_socket in clients: clients.remove(client_socket) if client_socket in client_names: del client_names[client_socket] def sharing_message(message, sender_socket): for client in clients: if client != sender_socket: try: client.send(message) except: elim_client(client) def handle_client(client_socket): name = client_socket.recv(1024).decode(codage) client_names[client_socket] = name print(f\"{name} has joined the chat!\") welcome_msg = f\"{name} has joined the chat!\".encode(codage) sharing_message(welcome_msg, client_socket) while True: try: message = client_socket.recv(1024) formatted_message = f\"{name}: {message.decode(codage)}\".encode( codage) sharing_message(formatted_message, client_socket) except: print(f\"{name} has left the chat!\") leave_msg = f\"{name} has left the chat!\".encode(codage) sharing_message(leave_msg, None) elim_client(client_socket) break def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((IP, PORT)) server_socket.listen(15) print(f\"Server listening on {IP}:{PORT}...\") while True: client_socket, addr = server_socket.accept() clients.append(client_socket) client_thread = threading.Thread(target=handle_client, args=(client_socket,)) client_thread.start() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430:"},{"location":"Lab1/#_20","text":"import socket import threading IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' def receive(client_socket): while True: message = client_socket.recv(1024).decode(codage) print(message) def send(client_socket): while True: message = input() client_socket.send(message.encode(codage)) def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((IP, PORT)) username = input(\"Enter your username: \") client_socket.send(username.encode(codage)) receive_thread = threading.Thread(target=receive, args = (client_socket, )) send_thread = threading.Thread(target=send, args = (client_socket, )) receive_thread.start() send_thread.start() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430:"},{"location":"Lab1/#_21","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u0430:"},{"location":"Lab1/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"Lab1/#_22","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u25cf \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u25cf \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"Lab1/#_23","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0448\u0430\u0431\u043b\u043e\u043d \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u044f send_response \u0438 parse_headers","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"Lab1/#_24","text":"import socket import sys class MyHTTPServer: # \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0430 def __init__(self, ip, port, codage): self.ip = ip self.port = port self.grades = {} self.codage = codage def serve_forever(self): #1. \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((self.ip, self.port)) server_socket.listen(10) while True: client_socket, addr = server_socket.accept() self.serve_client(client_socket) def serve_client(self, client_socket): # 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f data = client_socket.recv(1024).decode(self.codage) try: request = self.parse_request(data) response = self.handle_request(request) if response: client_socket.send(response.encode('utf-8')) except Exception as e: error_msg = \"HTTP/1.1 400 Bad Request\\n\\n\" client_socket.send(error_msg.encode('utf-8')) finally: client_socket.close() def parse_request(self, data): # 3. \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430 http+\u0437\u0430\u043f\u0440\u043e\u0441\u0430. # Python, \u0441\u043e\u043a\u0435\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u043e\u043a\u0440\u0443\u0433 \u043d\u0435\u0433\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u0431\u0435\u0440\u0442\u043a\u0443, # \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 file object \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441. \u042d\u0442\u043e \u0434\u0430\u0439\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441. # \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0432\u0441\u0435\u0433\u0434\u0430 - \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430. \u041f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 (\u043c\u0435\u0442\u043e\u0434 + url + \u0432\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430). # URL \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b (isu.ifmo.ru/pls/apex/f?p=2143 , # \u0433\u0434\u0435 isu.ifmo.ru/pls/apex/f, \u0430 p=2143 - \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 p \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 2143) lines = data.split('\\r\\n') headers = lines[0].split() print(f\"Headers : {headers}, {len(headers)}\") if len(headers) != 3: raise Exception(\"Bad request line\") body = lines[-1] print(body) grds = {} if \":\" in body: grds = {grade.split(\":\")[0]: grade.split(\":\")[1] for grade in body.split(\";\")} request = {\"method\": headers[0], \"url\": headers[1], \"version\": headers[2], \"grades\": grds} return request def handle_request(self, request): # 5. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 url \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. # \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b, \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0443\u0441\u043b\u043e\u0432\u0438\u0439, # \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 GET \u0438\u043b\u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441. # GET \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435. # POST \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. if request[\"method\"] == \"POST\": for subject, grade in request[\"grades\"].items(): if subject not in self.grades: self.grades[subject] = [] self.grades[subject].extend(grade) #with open('index.html', 'r') as f: return f\"HTTP/1.1 200 OK\\n\\n\" elif request[\"method\"] == \"GET\": response = f\"HTTP/1.1 200 OK\\n\\n\" \\ + \"<html><head><title>Grades</title></head><body>\" response += \"<table border='1'>\" response += \"<tr><th>Subject</th><th>Grades</th></tr>\" for subject, grades in self.grades.items(): grades_str = \", \".join(map(str, grades)) response += f\"<tr><td>{subject}</td><td>{grades_str}</td></tr>\" response += \"</table>\" response += \"</body></html>\" return response else: return \"HTTP/1.1 405 Something wrong with request\\n\\n\" #def send_response(self, *): # 6. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 status line \u0432\u0438\u0434\u0430 HTTP/1.1 <status_code> <reason>. # \u0417\u0430\u0442\u0435\u043c, \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043d\u0435\u0446 \u0441\u0435\u043a\u0446\u0438\u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432. if __name__ == '__main__': IP = \"127.0.0.1\" PORT = 44455 codage = 'utf-8' serv = MyHTTPServer(IP, PORT, codage) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430:"},{"location":"Lab1/#post","text":"import socket def test_post_request(): IP = \"127.0.0.1\" PORT = 44455 grades = { 'Math2': '\u0421', 'PE': 'C' } data = ';'.join([f\"{key}:{value}\" for key, value in grades.items()]) headers = f\"POST / HTTP/1.1\\r\\nContent-Length: {len(data)}\\r\\n\\r\\n{data}\" test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) test_socket.connect((IP, PORT)) test_socket.sendall(headers.encode()) response = test_socket.recv(1024) print(\"Response:\\n\", response.decode()) if __name__ == \"__main__\": test_post_request() GET \u0437\u0430\u043f\u0440\u043e\u0441: import socket IP = \"127.0.0.1\" PORT = 44455 def test_get_request(): request = f\"GET / HTTP/1.1\\r\\nHost: {IP}\\r\\n\\r\\n\" test_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) test_socket.connect((IP, PORT)) test_socket.sendall(request.encode()) response = test_socket.recv(1024) print(\"Response:\\n\", response.decode()) if __name__ == \"__main__\": test_get_request()","title":"POST \u0437\u0430\u043f\u0440\u043e\u0441:"},{"location":"Lab1/#_25","text":"","title":"\u0420\u0430\u0431\u043e\u0442\u0430"},{"location":"Lab1/#_26","text":"\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438, TCP, UDP, HTTP \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438.","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"Lab2/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Django. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f Python, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 pip install django django-admin starproject lab_2 \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c ./manage.py startapp hotels \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b: \u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0438: \u0441\u043e\u0436\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0430\u0445 \u043e\u0442\u0435\u043b\u0435\u0439 \u041e\u0442\u0435\u043b\u0438: \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0435\u043b\u0435 \u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435 \u0423\u043e\u0431\u0441\u0442\u0432\u0430: \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445 \u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b: \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0435\u0441\u0442\u044c \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043e\u0442\u0435\u043b\u0435 \u0411\u0440\u043e\u043d\u0438: \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u043c \u0438 \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u041e\u0431\u0437\u043e\u0440: \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0437\u043e\u0440 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0430 \u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0443, \u0432 \u043a\u043e\u0442\u0440\u043e\u0439 \u043e\u043d \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 class Visitor(AbstractUser): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) birth_date = models.DateTimeField(null=True, blank=True) passport = models.CharField(max_length=25, null=True) class Hotel(models.Model): name = models.CharField(max_length=100) owner_name = models.CharField(max_length=100) owner_contact = models.CharField(max_length=100) address = models.TextField() description = models.TextField() def __str__(self): return self.name class Amenity(models.Model): name = models.CharField(max_length=100) description = models.TextField() def __str__(self): return self.name class RoomType(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) name = models.CharField(max_length=100) description = models.TextField() price = models.DecimalField(max_digits=10, decimal_places=2) capacity = models.IntegerField() amenities = models.ManyToManyField(Amenity, related_name='room_types', blank=True) def __str__(self): return f'{self.hotel}-{self.name}' class Reservation(models.Model): user = models.ForeignKey(Visitor, on_delete=models.CASCADE) room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE) start_date = models.DateField() end_date = models.DateField() def __str__(self): return f'Reservation {self.user} - {self.id}' class Review(models.Model): reservation = models.ForeignKey(Reservation, on_delete=models.CASCADE) comment = models.TextField() rating = models.IntegerField(choices=[(i, i) for i in range(1, 11)]) stay_from = models.DateField() stay_to = models.DateField() author = models.ForeignKey(Visitor, on_delete=models.CASCADE) \u0424\u043e\u0440\u043c\u044b \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0430, \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0431\u0440\u043e\u043d\u0438 class VisitorCreationForm(UserCreationForm): class Meta: model = Visitor fields = ('username', 'email', 'surname', 'name', 'passport', 'password1', 'password2') class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['room_type', 'start_date', 'end_date'] class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ['rating', 'stay_from', 'stay_to', 'comment', 'author'] widgets = { 'stay_from': forms.DateInput(attrs={'type': 'date'}), 'stay_to': forms.DateInput(attrs={'type': 'date'}), 'rating': forms.NumberInput(attrs={'min': 1, 'max': 10}) } \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 view \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0432\u043e\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u0432\u0438\u0434\u044b: 1. \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439 2. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 3. \u041b\u0438\u0441\u0442\u0440 \u0431\u0440\u043e\u043d\u0435\u0439: \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0431\u0440\u043e\u043d\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438, \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0431\u0440\u043e\u043d\u0438 - \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0432\u0440\u043e\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 4. \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u044b \u0430\u0434\u043c\u0438\u043d\u0441\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0439 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 5. \u0412\u0438\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0442\u0443\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b def hotel_list(request): hotels = Hotel.objects.all() return render(request, 'hotel_list.html', {'hotels': hotels}) def register(request): if request.method == 'POST': form = VisitorCreationForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('hotel_list') else: form = VisitorCreationForm() return render(request, 'register.html', {'form': form}) @login_required def reservation_list(request): reservations = Reservation.objects.filter(user=request.user) return render(request, 'reservation_list.html', {'reservations': reservations}) @login_required def reservation_create(request): if request.method == 'POST': form = ReservationForm(request.POST) if form.is_valid(): reservation = form.save(commit=False) reservation.user = request.user reservation.save() return redirect('reservation_list') else: form = ReservationForm() return render(request, 'reservation_create.html', {'form': form}) @login_required def reservation_edit(request, reservation_id): reservation = get_object_or_404(Reservation, pk=reservation_id, user=request.user) if request.method == 'POST': form = ReservationForm(request.POST, instance=reservation) if form.is_valid(): form.save() return redirect('reservation_list') else: form = ReservationForm(instance=reservation) return render(request, 'reservation_edit.html', {'form': form, 'reservation': reservation}) @login_required def reservation_delete(request, reservation_id): reservation = get_object_or_404(Reservation, pk=reservation_id, user=request.user) if request.method == 'POST': reservation.delete() return redirect('reservation_list') return render(request, 'reservation_delete.html', {'reservation': reservation}) def is_admin(user): return user.is_authenticated and user.is_staff @login_required @user_passes_test(is_admin) def admin_reservation_list(request, user_id): user = get_object_or_404(User, pk=user_id) reservation = Reservation.objects.filter(user=user) return render(request, 'admin_reservations_list.html', {'reservation': reservation, 'reserved_user': user}) @login_required def review(request, reservation_id): reservation = get_object_or_404(Reservation, pk=reservation_id) if request.user != reservation.user: return redirect('reservation_list') review, created = Review.objects.get_or_create( reservation=reservation, defaults={ 'author': request.user, 'rating': 10, 'stay_from': reservation.start_date, 'stay_to': reservation.end_date, } ) if request.method == 'POST': form = ReviewForm(request.POST, instance=review) if form.is_valid(): if created: review = form.save(commit=False) review.author = request.user review.save() else: form.save() return redirect('reservation_list') else: form = ReviewForm(instance=review) return render(request, 'review.html', {'form': form, 'reservation': reservation}) def hotel_guests(request): today = datetime.now().date() first_day = today.replace(day=1) reservations_last_month = Reservation.objects.filter( start_date__gte=first_day) hotels_with_guests = {} for reservation in reservations_last_month: hotel_name = reservation.room_type.hotel.name if hotel_name not in hotels_with_guests: hotels_with_guests[hotel_name] = [] hotels_with_guests[hotel_name].append(reservation) return render(request, 'hotel_guests.html', {'hotels_with_guests': hotels_with_guests}) def welcome_page(request): return render(request, 'welcome.html') \u0421\u0441\u044b\u043b\u043a\u0438 \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c html \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\u044e \u041d\u0443\u0436\u043d\u043e \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0441\u0441\u044b\u043b\u043e\u043a urlpatterns = [ path('register/', register, name='register'), path('hotels/', hotel_list, name='hotel_list'), path('reservations/', reservation_list, name='reservation_list'), path('reservations/edit/<int:reservation_id>/', reservation_edit, name='reservation_edit'), path('reservations/delete/<int:reservation_id>/', reservation_delete, name='reservation_delete'), path('reservation/create/', reservation_create, name='reservation_create'), path('login/', LoginView.as_view(template_name='login.html'), name='login'), path('reservations/<int:user_id>/', admin_reservation_list, name='admin_reservation_list'), path('reservations/<int:reservation_id>/review/', review, name='review'), path('hotel-guests/', hotel_guests, name='hotel_guests'), path('', welcome_page, name='welcome_page') ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f2"},{"location":"Lab2/#no2","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21162"},{"location":"Lab2/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u043f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Django.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab2/#_2","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. - \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. - \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"Lab2/#_3","text":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443 \u0434\u043b\u044f Python, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 pip install django django-admin starproject lab_2 \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c ./manage.py startapp hotels","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"Lab2/#_4","text":"\u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b: \u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0438: \u0441\u043e\u0436\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0430\u0445 \u043e\u0442\u0435\u043b\u0435\u0439 \u041e\u0442\u0435\u043b\u0438: \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0435\u043b\u0435 \u0438 \u0435\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435 \u0423\u043e\u0431\u0441\u0442\u0432\u0430: \u043d\u0443\u0436\u043d\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432 \u043d\u043e\u043c\u0435\u0440\u0430\u0445 \u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b: \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0442\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0435\u0441\u0442\u044c \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043e\u0442\u0435\u043b\u0435 \u0411\u0440\u043e\u043d\u0438: \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u043c \u0438 \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u041e\u0431\u0437\u043e\u0440: \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0437\u043e\u0440 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0430 \u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0443, \u0432 \u043a\u043e\u0442\u0440\u043e\u0439 \u043e\u043d \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043b \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043d\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 class Visitor(AbstractUser): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) birth_date = models.DateTimeField(null=True, blank=True) passport = models.CharField(max_length=25, null=True) class Hotel(models.Model): name = models.CharField(max_length=100) owner_name = models.CharField(max_length=100) owner_contact = models.CharField(max_length=100) address = models.TextField() description = models.TextField() def __str__(self): return self.name class Amenity(models.Model): name = models.CharField(max_length=100) description = models.TextField() def __str__(self): return self.name class RoomType(models.Model): hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE) name = models.CharField(max_length=100) description = models.TextField() price = models.DecimalField(max_digits=10, decimal_places=2) capacity = models.IntegerField() amenities = models.ManyToManyField(Amenity, related_name='room_types', blank=True) def __str__(self): return f'{self.hotel}-{self.name}' class Reservation(models.Model): user = models.ForeignKey(Visitor, on_delete=models.CASCADE) room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE) start_date = models.DateField() end_date = models.DateField() def __str__(self): return f'Reservation {self.user} - {self.id}' class Review(models.Model): reservation = models.ForeignKey(Reservation, on_delete=models.CASCADE) comment = models.TextField() rating = models.IntegerField(choices=[(i, i) for i in range(1, 11)]) stay_from = models.DateField() stay_to = models.DateField() author = models.ForeignKey(Visitor, on_delete=models.CASCADE)","title":"\u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"Lab2/#_5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0430, \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0431\u0440\u043e\u043d\u0438 class VisitorCreationForm(UserCreationForm): class Meta: model = Visitor fields = ('username', 'email', 'surname', 'name', 'passport', 'password1', 'password2') class ReservationForm(forms.ModelForm): class Meta: model = Reservation fields = ['room_type', 'start_date', 'end_date'] class ReviewForm(forms.ModelForm): class Meta: model = Review fields = ['rating', 'stay_from', 'stay_to', 'comment', 'author'] widgets = { 'stay_from': forms.DateInput(attrs={'type': 'date'}), 'stay_to': forms.DateInput(attrs={'type': 'date'}), 'rating': forms.NumberInput(attrs={'min': 1, 'max': 10}) }","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"Lab2/#view","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0438\u0434\u043e\u0432 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0432\u043e\u0430\u0442\u044c \u0441\u043f\u043e\u0441\u043e\u0431 \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u043d\u0430\u043c \u0432\u0438\u0434\u044b: 1. \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439 2. \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0444\u043e\u0440\u043c\u0443 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f 3. \u041b\u0438\u0441\u0442\u0440 \u0431\u0440\u043e\u043d\u0435\u0439: \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0431\u0440\u043e\u043d\u0438 \u0447\u0435\u043b\u043e\u0432\u0435\u043a. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438, \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0435\u0440\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0439 \u0431\u0440\u043e\u043d\u0438 - \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0432\u0440\u043e\u0430\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 - \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0440\u043e\u043d\u0438 - \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u0430 4. \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u044b \u0430\u0434\u043c\u0438\u043d\u0441\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0440\u0435\u0437\u0435\u0440\u0432\u0430\u0446\u0438\u0439 \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446 5. \u0412\u0438\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432\u0441\u0442\u0443\u043f\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b def hotel_list(request): hotels = Hotel.objects.all() return render(request, 'hotel_list.html', {'hotels': hotels}) def register(request): if request.method == 'POST': form = VisitorCreationForm(request.POST) if form.is_valid(): user = form.save() login(request, user) return redirect('hotel_list') else: form = VisitorCreationForm() return render(request, 'register.html', {'form': form}) @login_required def reservation_list(request): reservations = Reservation.objects.filter(user=request.user) return render(request, 'reservation_list.html', {'reservations': reservations}) @login_required def reservation_create(request): if request.method == 'POST': form = ReservationForm(request.POST) if form.is_valid(): reservation = form.save(commit=False) reservation.user = request.user reservation.save() return redirect('reservation_list') else: form = ReservationForm() return render(request, 'reservation_create.html', {'form': form}) @login_required def reservation_edit(request, reservation_id): reservation = get_object_or_404(Reservation, pk=reservation_id, user=request.user) if request.method == 'POST': form = ReservationForm(request.POST, instance=reservation) if form.is_valid(): form.save() return redirect('reservation_list') else: form = ReservationForm(instance=reservation) return render(request, 'reservation_edit.html', {'form': form, 'reservation': reservation}) @login_required def reservation_delete(request, reservation_id): reservation = get_object_or_404(Reservation, pk=reservation_id, user=request.user) if request.method == 'POST': reservation.delete() return redirect('reservation_list') return render(request, 'reservation_delete.html', {'reservation': reservation}) def is_admin(user): return user.is_authenticated and user.is_staff @login_required @user_passes_test(is_admin) def admin_reservation_list(request, user_id): user = get_object_or_404(User, pk=user_id) reservation = Reservation.objects.filter(user=user) return render(request, 'admin_reservations_list.html', {'reservation': reservation, 'reserved_user': user}) @login_required def review(request, reservation_id): reservation = get_object_or_404(Reservation, pk=reservation_id) if request.user != reservation.user: return redirect('reservation_list') review, created = Review.objects.get_or_create( reservation=reservation, defaults={ 'author': request.user, 'rating': 10, 'stay_from': reservation.start_date, 'stay_to': reservation.end_date, } ) if request.method == 'POST': form = ReviewForm(request.POST, instance=review) if form.is_valid(): if created: review = form.save(commit=False) review.author = request.user review.save() else: form.save() return redirect('reservation_list') else: form = ReviewForm(instance=review) return render(request, 'review.html', {'form': form, 'reservation': reservation}) def hotel_guests(request): today = datetime.now().date() first_day = today.replace(day=1) reservations_last_month = Reservation.objects.filter( start_date__gte=first_day) hotels_with_guests = {} for reservation in reservations_last_month: hotel_name = reservation.room_type.hotel.name if hotel_name not in hotels_with_guests: hotels_with_guests[hotel_name] = [] hotels_with_guests[hotel_name].append(reservation) return render(request, 'hotel_guests.html', {'hotels_with_guests': hotels_with_guests}) def welcome_page(request): return render(request, 'welcome.html')","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 view"},{"location":"Lab2/#_6","text":"\u041d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0441\u044b\u043b\u043a\u0438 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c html \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e\u044e \u041d\u0443\u0436\u043d\u043e \u0435\u0449\u0435 \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u0445 \u043c\u0435\u0441\u0442\u043e \u0434\u043b\u044f \u0441\u0441\u044b\u043b\u043e\u043a urlpatterns = [ path('register/', register, name='register'), path('hotels/', hotel_list, name='hotel_list'), path('reservations/', reservation_list, name='reservation_list'), path('reservations/edit/<int:reservation_id>/', reservation_edit, name='reservation_edit'), path('reservations/delete/<int:reservation_id>/', reservation_delete, name='reservation_delete'), path('reservation/create/', reservation_create, name='reservation_create'), path('login/', LoginView.as_view(template_name='login.html'), name='login'), path('reservations/<int:user_id>/', admin_reservation_list, name='admin_reservation_list'), path('reservations/<int:reservation_id>/review/', review, name='review'), path('hotel-guests/', hotel_guests, name='hotel_guests'), path('', welcome_page, name='welcome_page') ]","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"Lab3/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21163 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django. \u041c\u043e\u0434\u0435\u043b\u044c \u042f \u0434\u0435\u043b\u0430\u043b \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u044f\u043c\u0438. \u0418\u0434\u0435\u044f \u0441\u0430\u0439\u0442\u0430: \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e + \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u044b \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. from django.db import models from django.contrib.auth.models import AbstractUser class Ingredient(models.Model): name = models.CharField(max_length=255) allergens = models.CharField(max_length=255, blank=True) is_vegetarian = models.BooleanField(default=False) nutritional_value = models.ForeignKey('NutritionalValue', on_delete=models.SET_NULL, null=True, blank=True) class NutritionalValue(models.Model): calories = models.IntegerField() proteins = models.IntegerField() carbohydrates = models.IntegerField() fats = models.IntegerField() class Tool(models.Model): name = models.CharField(max_length=255) cleaning_time = models.IntegerField() class Recipe(models.Model): difficulty_types = ( (\"E\", \"Easy\"), (\"M\", \"Medium\"), (\"H\", \"Hard\"), ) title = models.CharField(max_length=255) preparation_time = models.IntegerField() cooking_time = models.IntegerField() difficulty_level = models.CharField(max_length=2, choices=difficulty_types) region = models.CharField(max_length=255, blank=True) is_vegetarian = models.BooleanField(default=False) image_url = models.URLField(blank=True) ingredients = models.ManyToManyField(Ingredient, through='RecipeIngredient') tools = models.ManyToManyField(Tool, through='RecipeTool') class MealPlan(models.Model): date = models.DateField() breakfast = models.ForeignKey(Recipe, related_name='meal_plan_breakfast', on_delete=models.SET_NULL, null=True, blank=True) lunch = models.ForeignKey(Recipe, related_name='meal_plan_lunch', on_delete=models.SET_NULL, null=True, blank=True) dinner = models.ForeignKey(Recipe, related_name='meal_plan_dinner', on_delete=models.SET_NULL, null=True, blank=True) class RecipeIngredient(models.Model): recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE) ingredient = models.ForeignKey(Ingredient, on_delete=models.CASCADE) quantity = models.CharField(max_length=100) class RecipeTool(models.Model): recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE) tool = models.ForeignKey(Tool, on_delete=models.CASCADE) class UserProfile(AbstractUser): favorite_recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE, null=True, blank=True) \u041d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 Serializers \u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043f\u0438\u0448\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e, \u0432\u044b\u0432\u043e\u0434\u044f \u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u0438 \u0441\u0442\u0430\u0432\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0430\u043f\u0438 from django.contrib.auth.hashers import make_password from rest_framework import serializers from .models import Ingredient, NutritionalValue, Tool, Recipe, MealPlan, \\ RecipeIngredient, RecipeTool, UserProfile class NutritionalValueSerializer(serializers.ModelSerializer): class Meta: model = NutritionalValue fields = '__all__' class IngredientSerializer(serializers.ModelSerializer): nutritional_value = NutritionalValueSerializer(read_only=True) class Meta: model = Ingredient fields = '__all__' class ToolSerializer(serializers.ModelSerializer): class Meta: model = Tool fields = '__all__' class RecipeIngredientSerializer(serializers.ModelSerializer): ingredient = IngredientSerializer() class Meta: model = RecipeIngredient fields = '__all__' class RecipeToolSerializer(serializers.ModelSerializer): tool = ToolSerializer() class Meta: model = RecipeTool fields = '__all__' class RecipeSerializer(serializers.ModelSerializer): ingredients = RecipeIngredientSerializer(source='recipeingredient_set', many=True, read_only=True) tools = RecipeToolSerializer(source='recipetool_set', many=True, read_only=True) class Meta: model = Recipe fields = '__all__' class MealPlanSerializer(serializers.ModelSerializer): breakfast = RecipeSerializer() lunch = RecipeSerializer() dinner = RecipeSerializer() class Meta: model = MealPlan fields = '__all__' class UserProfileSerializer(serializers.ModelSerializer): favorite_recipe = serializers.PrimaryKeyRelatedField( queryset=Recipe.objects.all(), allow_null=True) class Meta: model = UserProfile fields = ( \"id\", \"password\", \"username\", \"email\", \"first_name\", \"last_name\", \"favorite_recipe\" ) def create(self, validated_data): return super().create({**validated_data, \"password\": make_password( validated_data[\"password\"])}) Views \u0414\u0430\u043b\u044c\u0448\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044c\u044e\u0445\u0438 \u0434\u043b\u044f \u0430\u043f\u0438. \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e update \u0438 create \u0434\u043b\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u0430 \u0438 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430, \u0442.\u043a. \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b, \u0442\u0430\u043a\u0436\u0435 \u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0430\u043f\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u0430\u043b\u043e\u0440\u0438\u0439\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430, \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430 \u043f\u043e \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0443 from django.db.models import Sum from django.shortcuts import get_object_or_404 from rest_framework import viewsets, status from rest_framework.decorators import action, api_view, permission_classes from rest_framework.permissions import IsAdminUser, AllowAny from rest_framework.response import Response from .models import Ingredient, NutritionalValue, Tool, Recipe, MealPlan, \\ RecipeIngredient, UserProfile, RecipeTool from .serializers import IngredientSerializer, NutritionalValueSerializer, \\ ToolSerializer, RecipeSerializer, MealPlanSerializer, UserProfileSerializer class IngredientViewSet(viewsets.ModelViewSet): queryset = Ingredient.objects.all() serializer_class = IngredientSerializer def create(self, request, *args, **kwargs): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) nutritional_data = request.data.get('nutritional_value') nutritional_value = None if nutritional_data: nutritional_serializer = NutritionalValueSerializer( data=nutritional_data) if nutritional_serializer.is_valid(): if 'id' in nutritional_data: nutritional_value = NutritionalValue.objects.get( id=nutritional_data['id']) else: nutritional_value = NutritionalValue.objects.create( **nutritional_serializer.validated_data) ingredient_data = serializer.validated_data ingredient_data['nutritional_value'] = nutritional_value ingredient = Ingredient.objects.create(**ingredient_data) output_serializer = IngredientSerializer(ingredient) return Response(output_serializer.data, status=status.HTTP_201_CREATED) def destroy(self, request, *args, **kwargs): instance = self.get_object() self.perform_destroy(instance) return Response(status=status.HTTP_204_NO_CONTENT) class NutritionalValueViewSet(viewsets.ModelViewSet): queryset = NutritionalValue.objects.all() serializer_class = NutritionalValueSerializer class ToolViewSet(viewsets.ModelViewSet): queryset = Tool.objects.all() serializer_class = ToolSerializer class RecipeViewSet(viewsets.ModelViewSet): queryset = Recipe.objects.all() serializer_class = RecipeSerializer def create(self, request, *args, **kwargs): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) recipe_data = serializer.validated_data recipe = Recipe.objects.create( title=recipe_data['title'], preparation_time=recipe_data['preparation_time'], cooking_time=recipe_data['cooking_time'], difficulty_level=recipe_data['difficulty_level'], region=recipe_data.get('region', ''), is_vegetarian=recipe_data['is_vegetarian'], image_url=recipe_data.get('image_url', '') ) for ingredient_data in request.data.get('ingredients', []): ingredient_id = ingredient_data['id'] quantity = ingredient_data['quantity'] ingredient = get_object_or_404(Ingredient, id=ingredient_id) RecipeIngredient.objects.create(recipe=recipe, ingredient=ingredient, quantity=quantity) for tool_data in request.data.get('tools', []): tool_id = tool_data['id'] tool = get_object_or_404(Ingredient, id=tool_id) RecipeTool.objects.create(recipe=recipe, tool=tool) output_serializer = RecipeSerializer(recipe) headers = self.get_success_headers(output_serializer.data) return Response(output_serializer.data, status=status.HTTP_201_CREATED, headers=headers) def update(self, request, *args, **kwargs): partial = kwargs.pop('partial', False) instance = self.get_object() serializer = self.get_serializer(instance, data=request.data, partial=partial) serializer.is_valid(raise_exception=True) self.perform_update(serializer) if 'ingredients' in request.data: RecipeIngredient.objects.filter(recipe=instance).delete() for ingredient_data in request.data['ingredients']: ingredient_id = ingredient_data['ingredient']['id'] quantity = ingredient_data['quantity'] ingredient = get_object_or_404(Ingredient, id=ingredient_id) RecipeIngredient.objects.create(recipe=instance, ingredient=ingredient, quantity=quantity) if 'tools' in request.data: RecipeTool.objects.filter(recipe=instance).delete() for tool_data in request.data['tools']: tool_id = tool_data['tool']['id'] tool = get_object_or_404(Tool, id=tool_id) RecipeTool.objects.create(recipe=instance, tool=tool) return Response(serializer.data) def find_highest_calorie_plan(): max_calorie_plan = None max_calories = 0 for plan in MealPlan.objects.all(): total_calories = 0 for recipe in [plan.breakfast, plan.lunch, plan.dinner]: if recipe: for recipe_ingredient in RecipeIngredient.objects.filter( recipe=recipe): if recipe_ingredient.ingredient.nutritional_value.calories: calories_per_unit = recipe_ingredient.ingredient.\\ nutritional_value.calories #quantity = float(recipe_ingredient.quantity) total_calories += calories_per_unit if total_calories > max_calories: max_calories = total_calories max_calorie_plan = plan return max_calorie_plan class MealPlanViewSet(viewsets.ModelViewSet): queryset = MealPlan.objects.all() serializer_class = MealPlanSerializer @action(detail=False) def highest_calorie_plan(self, request): max_calorie_plan = find_highest_calorie_plan() if max_calorie_plan: serializer = self.get_serializer(max_calorie_plan) return Response(serializer.data) else: return Response({'status': 'no meal plans found'}, status=status.HTTP_404_NOT_FOUND) @api_view([\"POST\"]) def find_recipes_by_ingredient(request): ingredient_name = request.data[\"name\"] queryset = Recipe.objects.filter(ingredients__name=ingredient_name) serializer = RecipeSerializer(queryset, many=True) return Response(serializer.data, status=status.HTTP_200_OK) @api_view([\"POST\"]) def find_recipes_by_nutrition(request): min_calories = request.data.get(\"min_calories\", 0) min_proteins = request.data.get(\"min_proteins\", 0) min_carbs = request.data.get(\"min_carbs\", 0) min_fats = request.data.get(\"min_fats\", 0) queryset = Recipe.objects.annotate( total_calories=Sum('ingredients__nutritional_value__calories'), total_proteins=Sum('ingredients__nutritional_value__proteins'), total_carbohydrates=Sum('ingredients__nutritional_value__carbohydrates'), total_fats=Sum('ingredients__nutritional_value__fats') ).filter( total_calories__gte=min_calories, total_proteins__gte=min_proteins, total_carbohydrates__gte=min_carbs, total_fats__gte=min_fats ) serializer = RecipeSerializer(queryset, many=True) return Response(serializer.data, status=status.HTTP_200_OK) class UserProfileViewSet(viewsets.ModelViewSet): permission_classes = [IsAdminUser] queryset = UserProfile.objects.all() serializer_class = UserProfileSerializer def create(self, request, *args, **kwargs): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) self.perform_create(serializer) headers = self.get_success_headers(serializer.data) return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers) @action(detail=True, methods=['patch']) def partial_update_profile(self, request, pk=None): instance = self.get_object() partial_data = request.data serializer = self.get_serializer(instance, data=partial_data, partial=True) serializer.is_valid(raise_exception=True) for key, value in serializer.validated_data.items(): setattr(instance, key, value) instance.save() return Response(self.get_serializer(instance).data) def destroy(self, request, *args, **kwargs): instance = self.get_object() self.perform_destroy(instance) return Response(status=status.HTTP_204_NO_CONTENT) \u0421\u0441\u044b\u043b\u043a\u0438 \u041e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0438. \u0417\u0434\u0435\u0441\u044c \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c. from django.urls import path, include from rest_framework.routers import DefaultRouter from .views import IngredientViewSet, NutritionalValueViewSet, \\ ToolViewSet, RecipeViewSet, MealPlanViewSet, find_recipes_by_nutrition, \\ find_recipes_by_ingredient, UserProfileViewSet router = DefaultRouter() router.register(r'ingredients', IngredientViewSet) router.register(r'nutritionalvalues', NutritionalValueViewSet) router.register(r'tools', ToolViewSet) router.register(r'recipes', RecipeViewSet) router.register(r'mealplans', MealPlanViewSet) router.register(r'users', UserProfileViewSet) urlpatterns = [ path('', include(router.urls)), path('mealplans/highest_calorie_plan/', MealPlanViewSet.as_view({'get': 'highest_calorie_plan'})), path('find_recipe/', find_recipes_by_nutrition), path('find_recipe_ing/', find_recipes_by_ingredient) ] \u0420\u0430\u0431\u043e\u0442\u0430 \u0422\u0430\u043a\u0436\u0435 \u0441\u0442\u043e\u0438\u0442 \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0447\u0435\u0440\u0435\u0437 /auth/users/ \u043f\u043e\u043b\u0447\u0443\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041f\u0440\u0438\u043c\u0435\u0440\u044b: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430: \u0412\u044b\u0432\u043e\u0434 \u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 DjangoREST","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f3"},{"location":"Lab3/#no3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21163"},{"location":"Lab3/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab3/#_2","text":"\u042f \u0434\u0435\u043b\u0430\u043b \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u044f\u043c\u0438. \u0418\u0434\u0435\u044f \u0441\u0430\u0439\u0442\u0430: \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e + \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u044b \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. from django.db import models from django.contrib.auth.models import AbstractUser class Ingredient(models.Model): name = models.CharField(max_length=255) allergens = models.CharField(max_length=255, blank=True) is_vegetarian = models.BooleanField(default=False) nutritional_value = models.ForeignKey('NutritionalValue', on_delete=models.SET_NULL, null=True, blank=True) class NutritionalValue(models.Model): calories = models.IntegerField() proteins = models.IntegerField() carbohydrates = models.IntegerField() fats = models.IntegerField() class Tool(models.Model): name = models.CharField(max_length=255) cleaning_time = models.IntegerField() class Recipe(models.Model): difficulty_types = ( (\"E\", \"Easy\"), (\"M\", \"Medium\"), (\"H\", \"Hard\"), ) title = models.CharField(max_length=255) preparation_time = models.IntegerField() cooking_time = models.IntegerField() difficulty_level = models.CharField(max_length=2, choices=difficulty_types) region = models.CharField(max_length=255, blank=True) is_vegetarian = models.BooleanField(default=False) image_url = models.URLField(blank=True) ingredients = models.ManyToManyField(Ingredient, through='RecipeIngredient') tools = models.ManyToManyField(Tool, through='RecipeTool') class MealPlan(models.Model): date = models.DateField() breakfast = models.ForeignKey(Recipe, related_name='meal_plan_breakfast', on_delete=models.SET_NULL, null=True, blank=True) lunch = models.ForeignKey(Recipe, related_name='meal_plan_lunch', on_delete=models.SET_NULL, null=True, blank=True) dinner = models.ForeignKey(Recipe, related_name='meal_plan_dinner', on_delete=models.SET_NULL, null=True, blank=True) class RecipeIngredient(models.Model): recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE) ingredient = models.ForeignKey(Ingredient, on_delete=models.CASCADE) quantity = models.CharField(max_length=100) class RecipeTool(models.Model): recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE) tool = models.ForeignKey(Tool, on_delete=models.CASCADE) class UserProfile(AbstractUser): favorite_recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE, null=True, blank=True) \u041d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0441\u0442\u0438 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"Lab3/#serializers","text":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u043f\u0438\u0448\u0435\u043c \u043e\u0431\u044b\u0447\u043d\u043e, \u0432\u044b\u0432\u043e\u0434\u044f \u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u0438 \u0441\u0442\u0430\u0432\u044f \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0430\u043f\u0438 from django.contrib.auth.hashers import make_password from rest_framework import serializers from .models import Ingredient, NutritionalValue, Tool, Recipe, MealPlan, \\ RecipeIngredient, RecipeTool, UserProfile class NutritionalValueSerializer(serializers.ModelSerializer): class Meta: model = NutritionalValue fields = '__all__' class IngredientSerializer(serializers.ModelSerializer): nutritional_value = NutritionalValueSerializer(read_only=True) class Meta: model = Ingredient fields = '__all__' class ToolSerializer(serializers.ModelSerializer): class Meta: model = Tool fields = '__all__' class RecipeIngredientSerializer(serializers.ModelSerializer): ingredient = IngredientSerializer() class Meta: model = RecipeIngredient fields = '__all__' class RecipeToolSerializer(serializers.ModelSerializer): tool = ToolSerializer() class Meta: model = RecipeTool fields = '__all__' class RecipeSerializer(serializers.ModelSerializer): ingredients = RecipeIngredientSerializer(source='recipeingredient_set', many=True, read_only=True) tools = RecipeToolSerializer(source='recipetool_set', many=True, read_only=True) class Meta: model = Recipe fields = '__all__' class MealPlanSerializer(serializers.ModelSerializer): breakfast = RecipeSerializer() lunch = RecipeSerializer() dinner = RecipeSerializer() class Meta: model = MealPlan fields = '__all__' class UserProfileSerializer(serializers.ModelSerializer): favorite_recipe = serializers.PrimaryKeyRelatedField( queryset=Recipe.objects.all(), allow_null=True) class Meta: model = UserProfile fields = ( \"id\", \"password\", \"username\", \"email\", \"first_name\", \"last_name\", \"favorite_recipe\" ) def create(self, validated_data): return super().create({**validated_data, \"password\": make_password( validated_data[\"password\"])})","title":"Serializers"},{"location":"Lab3/#views","text":"\u0414\u0430\u043b\u044c\u0448\u0435 \u0434\u0435\u043b\u0430\u0435\u043c \u0432\u044c\u044e\u0445\u0438 \u0434\u043b\u044f \u0430\u043f\u0438. \u041d\u0443\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e update \u0438 create \u0434\u043b\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u0430 \u0438 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430, \u0442.\u043a. \u043e\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b, \u0442\u0430\u043a\u0436\u0435 \u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0430\u043f\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u0430\u043c\u043e\u0433\u043e \u043a\u0430\u043b\u043e\u0440\u0438\u0439\u043d\u043e\u0433\u043e \u043f\u043b\u0430\u043d\u0430, \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0431\u043b\u044e\u0434\u0430 \u043f\u043e \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0443 from django.db.models import Sum from django.shortcuts import get_object_or_404 from rest_framework import viewsets, status from rest_framework.decorators import action, api_view, permission_classes from rest_framework.permissions import IsAdminUser, AllowAny from rest_framework.response import Response from .models import Ingredient, NutritionalValue, Tool, Recipe, MealPlan, \\ RecipeIngredient, UserProfile, RecipeTool from .serializers import IngredientSerializer, NutritionalValueSerializer, \\ ToolSerializer, RecipeSerializer, MealPlanSerializer, UserProfileSerializer class IngredientViewSet(viewsets.ModelViewSet): queryset = Ingredient.objects.all() serializer_class = IngredientSerializer def create(self, request, *args, **kwargs): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) nutritional_data = request.data.get('nutritional_value') nutritional_value = None if nutritional_data: nutritional_serializer = NutritionalValueSerializer( data=nutritional_data) if nutritional_serializer.is_valid(): if 'id' in nutritional_data: nutritional_value = NutritionalValue.objects.get( id=nutritional_data['id']) else: nutritional_value = NutritionalValue.objects.create( **nutritional_serializer.validated_data) ingredient_data = serializer.validated_data ingredient_data['nutritional_value'] = nutritional_value ingredient = Ingredient.objects.create(**ingredient_data) output_serializer = IngredientSerializer(ingredient) return Response(output_serializer.data, status=status.HTTP_201_CREATED) def destroy(self, request, *args, **kwargs): instance = self.get_object() self.perform_destroy(instance) return Response(status=status.HTTP_204_NO_CONTENT) class NutritionalValueViewSet(viewsets.ModelViewSet): queryset = NutritionalValue.objects.all() serializer_class = NutritionalValueSerializer class ToolViewSet(viewsets.ModelViewSet): queryset = Tool.objects.all() serializer_class = ToolSerializer class RecipeViewSet(viewsets.ModelViewSet): queryset = Recipe.objects.all() serializer_class = RecipeSerializer def create(self, request, *args, **kwargs): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) recipe_data = serializer.validated_data recipe = Recipe.objects.create( title=recipe_data['title'], preparation_time=recipe_data['preparation_time'], cooking_time=recipe_data['cooking_time'], difficulty_level=recipe_data['difficulty_level'], region=recipe_data.get('region', ''), is_vegetarian=recipe_data['is_vegetarian'], image_url=recipe_data.get('image_url', '') ) for ingredient_data in request.data.get('ingredients', []): ingredient_id = ingredient_data['id'] quantity = ingredient_data['quantity'] ingredient = get_object_or_404(Ingredient, id=ingredient_id) RecipeIngredient.objects.create(recipe=recipe, ingredient=ingredient, quantity=quantity) for tool_data in request.data.get('tools', []): tool_id = tool_data['id'] tool = get_object_or_404(Ingredient, id=tool_id) RecipeTool.objects.create(recipe=recipe, tool=tool) output_serializer = RecipeSerializer(recipe) headers = self.get_success_headers(output_serializer.data) return Response(output_serializer.data, status=status.HTTP_201_CREATED, headers=headers) def update(self, request, *args, **kwargs): partial = kwargs.pop('partial', False) instance = self.get_object() serializer = self.get_serializer(instance, data=request.data, partial=partial) serializer.is_valid(raise_exception=True) self.perform_update(serializer) if 'ingredients' in request.data: RecipeIngredient.objects.filter(recipe=instance).delete() for ingredient_data in request.data['ingredients']: ingredient_id = ingredient_data['ingredient']['id'] quantity = ingredient_data['quantity'] ingredient = get_object_or_404(Ingredient, id=ingredient_id) RecipeIngredient.objects.create(recipe=instance, ingredient=ingredient, quantity=quantity) if 'tools' in request.data: RecipeTool.objects.filter(recipe=instance).delete() for tool_data in request.data['tools']: tool_id = tool_data['tool']['id'] tool = get_object_or_404(Tool, id=tool_id) RecipeTool.objects.create(recipe=instance, tool=tool) return Response(serializer.data) def find_highest_calorie_plan(): max_calorie_plan = None max_calories = 0 for plan in MealPlan.objects.all(): total_calories = 0 for recipe in [plan.breakfast, plan.lunch, plan.dinner]: if recipe: for recipe_ingredient in RecipeIngredient.objects.filter( recipe=recipe): if recipe_ingredient.ingredient.nutritional_value.calories: calories_per_unit = recipe_ingredient.ingredient.\\ nutritional_value.calories #quantity = float(recipe_ingredient.quantity) total_calories += calories_per_unit if total_calories > max_calories: max_calories = total_calories max_calorie_plan = plan return max_calorie_plan class MealPlanViewSet(viewsets.ModelViewSet): queryset = MealPlan.objects.all() serializer_class = MealPlanSerializer @action(detail=False) def highest_calorie_plan(self, request): max_calorie_plan = find_highest_calorie_plan() if max_calorie_plan: serializer = self.get_serializer(max_calorie_plan) return Response(serializer.data) else: return Response({'status': 'no meal plans found'}, status=status.HTTP_404_NOT_FOUND) @api_view([\"POST\"]) def find_recipes_by_ingredient(request): ingredient_name = request.data[\"name\"] queryset = Recipe.objects.filter(ingredients__name=ingredient_name) serializer = RecipeSerializer(queryset, many=True) return Response(serializer.data, status=status.HTTP_200_OK) @api_view([\"POST\"]) def find_recipes_by_nutrition(request): min_calories = request.data.get(\"min_calories\", 0) min_proteins = request.data.get(\"min_proteins\", 0) min_carbs = request.data.get(\"min_carbs\", 0) min_fats = request.data.get(\"min_fats\", 0) queryset = Recipe.objects.annotate( total_calories=Sum('ingredients__nutritional_value__calories'), total_proteins=Sum('ingredients__nutritional_value__proteins'), total_carbohydrates=Sum('ingredients__nutritional_value__carbohydrates'), total_fats=Sum('ingredients__nutritional_value__fats') ).filter( total_calories__gte=min_calories, total_proteins__gte=min_proteins, total_carbohydrates__gte=min_carbs, total_fats__gte=min_fats ) serializer = RecipeSerializer(queryset, many=True) return Response(serializer.data, status=status.HTTP_200_OK) class UserProfileViewSet(viewsets.ModelViewSet): permission_classes = [IsAdminUser] queryset = UserProfile.objects.all() serializer_class = UserProfileSerializer def create(self, request, *args, **kwargs): serializer = self.get_serializer(data=request.data) serializer.is_valid(raise_exception=True) self.perform_create(serializer) headers = self.get_success_headers(serializer.data) return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers) @action(detail=True, methods=['patch']) def partial_update_profile(self, request, pk=None): instance = self.get_object() partial_data = request.data serializer = self.get_serializer(instance, data=partial_data, partial=True) serializer.is_valid(raise_exception=True) for key, value in serializer.validated_data.items(): setattr(instance, key, value) instance.save() return Response(self.get_serializer(instance).data) def destroy(self, request, *args, **kwargs): instance = self.get_object() self.perform_destroy(instance) return Response(status=status.HTTP_204_NO_CONTENT)","title":"Views"},{"location":"Lab3/#_3","text":"\u041e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u0441\u044b\u043b\u043a\u0438. \u0417\u0434\u0435\u0441\u044c \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c. from django.urls import path, include from rest_framework.routers import DefaultRouter from .views import IngredientViewSet, NutritionalValueViewSet, \\ ToolViewSet, RecipeViewSet, MealPlanViewSet, find_recipes_by_nutrition, \\ find_recipes_by_ingredient, UserProfileViewSet router = DefaultRouter() router.register(r'ingredients', IngredientViewSet) router.register(r'nutritionalvalues', NutritionalValueViewSet) router.register(r'tools', ToolViewSet) router.register(r'recipes', RecipeViewSet) router.register(r'mealplans', MealPlanViewSet) router.register(r'users', UserProfileViewSet) urlpatterns = [ path('', include(router.urls)), path('mealplans/highest_calorie_plan/', MealPlanViewSet.as_view({'get': 'highest_calorie_plan'})), path('find_recipe/', find_recipes_by_nutrition), path('find_recipe_ing/', find_recipes_by_ingredient) ]","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"Lab3/#_4","text":"\u0422\u0430\u043a\u0436\u0435 \u0441\u0442\u043e\u0438\u0442 \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0447\u0435\u0440\u0435\u0437 /auth/users/ \u043f\u043e\u043b\u0447\u0443\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041f\u0440\u0438\u043c\u0435\u0440\u044b: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430:","title":"\u0420\u0430\u0431\u043e\u0442\u0430"},{"location":"Lab3/#_5","text":"\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 DjangoREST","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"Lab4/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21164 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u042f \u0434\u0435\u043b\u0430\u043b \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u044f\u043c\u0438. \u0418\u0434\u0435\u044f \u0441\u0430\u0439\u0442\u0430: \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e + \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u044b \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0432 3 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0432\u0445\u043e\u0434 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0432\u0445\u043e\u0434 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0433\u0434\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0435\u043c\u0443 \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d. \u041d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u044f\u0442\u043d\u043e\u0433\u043e \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430. <template> <div> <h2>Registration</h2> <form @submit.prevent=\"register\"> <div> <label for=\"username\">Username:</label> <input id=\"username\" v-model=\"user.username\" type=\"text\" required> </div> <div> <label for=\"email\">Email:</label> <input id=\"email\" v-model=\"user.email\" type=\"email\" required> </div> <div> <label for=\"password\">Password:</label> <input id=\"password\" v-model=\"user.password\" type=\"password\" required> </div> <button type=\"submit\">Register</button> <router-link to=\"/login\">Log in</router-link> </form> </div> </template> <script> import axios from 'axios'; export default { name: 'RegisterPage', data() { return { user: { username: '', email: '', password: '' } } }, methods: { async register() { try { const response = await axios.post('http://127.0.0.1:8000/auth/users/', this.user); console.log('Registration successful', response.data); const response_login = await axios.post('http://127.0.0.1:8000/auth/token/login/', { username: this.user.username, password: this.user.password, }); const accessToken = response_login.data.auth_token; localStorage.setItem('access_token', accessToken); console.log('Login successful. Token:', accessToken); this.$router.push('/'); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:', error.response.data); } } } } </script> <style scoped> .container { max-width: 400px; margin: 0 auto; padding: 20px; text-align: center; } h2 { color: #333; font-size: 2em; margin-bottom: 20px; } form { display: flex; flex-direction: column; align-items: center; } label { margin-bottom: 5px; } input { margin-bottom: 10px; padding: 10px; font-size: 1em; } button { background-color: #3bbc55; color: #ffffff; padding: 10px; border: none; cursor: pointer; font-size: 1em; border-radius: 4px; } </style> <template> <div> <h2>Log in</h2> <form @submit.prevent=\"login\"> <div> <label for=\"username\">Uername:</label> <input id=\"username\" v-model=\"username\" type=\"text\" required> </div> <div> <label for=\"password\">Password:</label> <input id=\"password\" v-model=\"password\" type=\"password\" required> </div> <button type=\"submit\">Log in</button> <router-link to=\"/register\">Register</router-link> </form> </div> </template> <script> import axios from 'axios'; export default { name: 'LoginPage', data() { return { username: '', password: '' } }, methods: { async login() { try { const response = await axios.post('http://127.0.0.1:8000/auth/token/login/', { username: this.username, password: this.password, }); const accessToken = response.data.auth_token; localStorage.setItem('access_token', accessToken); console.log('Login successful. Token:', accessToken); this.$router.push('/'); } catch (error) { console.error('Login failed:', error.response.data); } } } } </script> <style scoped> .container { max-width: 400px; margin: 0 auto; padding: 20px; text-align: center; } h2 { color: #333; font-size: 2em; margin-bottom: 20px; } form { display: flex; flex-direction: column; align-items: center; } label { margin-bottom: 5px; } input { margin-bottom: 10px; padding: 10px; font-size: 1em; } button { background-color: #3bbc55; color: #ffffff; padding: 10px; border: none; cursor: pointer; font-size: 1em; border-radius: 4px; } </style> \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430: \u0420\u0435\u0446\u0435\u043f\u0442\u044b \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0440\u0435\u0446\u0435\u043f\u0442\u0430\u043c\u0438 \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u0442.\u043a. \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0432\u0435 \u0444\u043e\u0440\u043c\u044b \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432, \u0438\u0437-\u0437\u0430 \u0447\u0435\u0433\u043e \u043a\u043e\u0434 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434 500 \u0441\u0442\u0440\u043e\u0447\u0435\u043a <template> <div class = \"main-container\"> <div class = \"recipe-list-container\"> <h1>Recipes</h1> <ul class=\"recipe-list\"> <li v-for=\"recipe in recipes\" :key=\"recipe.id\"> <h2>{{ recipe.title }}</h2> <p><span class=\"label\">Preparation Time:</span> <span class=\"value\">{{ recipe.preparation_time }} min</span></p> <p><span class=\"label\">Cooking Time:</span> <span class=\"value\">{{ recipe.cooking_time }} min</span></p> <p><span class=\"label\">Difficulty:</span> <span class=\"value\">{{ recipe.difficulty_level }}</span></p> <p><span class=\"label\">Region:</span> <span class=\"value\">{{ recipe.region }}</span></p> <p><span class=\"label\">Vegetarian:</span> <span class=\"value\">{{ recipe.is_vegetarian ? 'Yes' : 'No' }}</span></p> <br><br> <div v-if=\"recipe.ingredients.length\"> <h3>Ingredients:</h3> <ul> <li v-for=\"ingredient in recipe.ingredients\" :key=\"ingredient.id\"> <span class=\"value\">{{ ingredient.ingredient.name }}</span> - <span class=\"value\">{{ ingredient.quantity }}</span> </li> </ul> </div> <div v-if=\"recipe.tools.length\"> <h3>Tools:</h3> <ul> <li v-for=\"tool in recipe.tools\" :key=\"tool.id\"> <span class=\"value\">{{ tool.tool.name }}</span> </li> </ul> </div> <br> <button @click=\"deleteRecipe(recipe.id)\">Delete</button> <button @click=\"startEdit(recipe)\">Edit</button> </li> </ul> <div v-if=\"editRecipe\"> <h2>Recipe Edition: {{ editRecipe.title }}</h2> <form @submit.prevent=\"updateRecipe\"> <div> <label for=\"editTitle\">Title:</label> <input id=\"editTitle\" type=\"text\" v-model=\"editRecipe.title\" required> </div> <div> <label for=\"editPreparationTime\">Preparation Time (in minutes):</label> <input id=\"editPreparationTime\" type=\"number\" v-model=\"editRecipe.preparation_time\" required> </div> <div> <label for=\"editCookingTime\">Cooking Time (in minutes):</label> <input id=\"editCookingTime\" type=\"number\" v-model=\"editRecipe.cooking_time\" required> </div> <div> <label for=\"editDifficulty\">Difficulty:</label> <select id=\"editDifficulty\" v-model=\"editRecipe.difficulty_level\" required> <option value=\"E\">Easy</option> <option value=\"M\">Medium</option> <option value=\"H\">Hard</option> </select> </div> <div> <label for=\"editRegion\">Region:</label> <input id=\"editRegion\" type=\"text\" v-model=\"editRecipe.region\"> </div> <div> <label for=\"editVegetarian\">Vegetarian:</label> <input id=\"editVegetarian\" type=\"checkbox\" v-model=\"editRecipe.is_vegetarian\"> </div> <h3>Ingredients:</h3> <ul> <li v-for=\"(ingredient, index) in editRecipe.ingredients\" :key=\"ingredient.id\"> {{ ingredient.ingredient.name }} - <input type=\"text\" v-model=\"ingredient.quantity\"> <button @click=\"removeIngredient(index)\">Remove</button> </li> </ul> <div> <select v-model=\"newIngredientId\"> <option v-for=\"ingredient in ingredients\" :value=\"ingredient.id\">{{ ingredient.name }}</option> </select> <input type=\"text\" v-model=\"newIngredientQuantity\" placeholder=\"Quantity\"> <button @click=\"addIngredient\">Add Ingredient</button> </div> <button type=\"submit\">Update Recipe</button> <button @click=\"cancelEdit\">Cancel</button> </form> </div> </div> <div class=\"form-container\"> <h2>Create a New Recipe</h2> <form @submit.prevent=\"createRecipe\"> <div> <label for=\"newTitle\">Title:</label> <input id=\"newTitle\" type=\"text\" v-model=\"newRecipe.title\" required> </div> <div> <label for=\"newPreparationTime\">Preparation Time (in minutes):</label> <input id=\"newPreparationTime\" type=\"number\" v-model=\"newRecipe.preparation_time\" required> </div> <div> <label for=\"newCookingTime\">Cooking Time (in minutes):</label> <input id=\"newCookingTime\" type=\"number\" v-model=\"newRecipe.cooking_time\" required> </div> <div> <label for=\"newDifficulty\">Difficulty:</label> <select id=\"newDifficulty\" v-model=\"newRecipe.difficulty_level\" required> <option value=\"E\">Easy</option> <option value=\"M\">Medium</option> <option value=\"H\">Hard</option> </select> </div> <div> <label for=\"newRegion\">Region:</label> <input id=\"newRegion\" type=\"text\" v-model=\"newRecipe.region\"> </div> <div> <label for=\"newVegetarian\">Vegetarian:</label> <input id=\"newVegetarian\" type=\"checkbox\" v-model=\"newRecipe.is_vegetarian\"> </div> <br> <button type=\"submit\">Create Recipe</button> </form> </div> </div> </template> <script> import axios from 'axios'; export default { name: \"RecipeList\", data() { return { recipes: [], editRecipe: null, newRecipe: { title: '', preparation_time: 0, cooking_time: 0, difficulty_level: 'E', region: '', is_vegetarian: false, ingredients: [] }, newIngredientId: null, newIngredientQuantity: '', ingredients: [] } }, created() { this.fetchRecipes(); this.fetchIngredients(); }, methods: { addIngredient(event) { event.preventDefault(); const ingredientToAdd = this.ingredients.find(ing => ing.id === this.newIngredientId); if (ingredientToAdd) { this.editRecipe.ingredients.push({ ingredient: ingredientToAdd, quantity: this.newIngredientQuantity }); this.newIngredientId = null; this.newIngredientQuantity = ''; } }, removeIngredient(index) { this.editRecipe.ingredients.splice(index, 1); }, fetchIngredients() { const token = localStorage.getItem('access_token'); axios.get('http://127.0.0.1:8000/api/ingredients/', { headers: { 'Authorization': `Token ${token}` } }) .then(response => { this.ingredients = response.data; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432:', error); }); }, fetchRecipes() { const token = localStorage.getItem('access_token'); axios.get('http://127.0.0.1:8000/api/recipes/', { headers: { 'Authorization': `Token ${token}` } }) .then(response => { this.recipes = response.data; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432:', error); }) }, startEdit(recipe) { this.editRecipe = {...recipe}; }, cancelEdit() { this.editRecipe = null; }, updateRecipe() { const token = localStorage.getItem('access_token'); axios.patch(`http://127.0.0.1:8000/api/recipes/${this.editRecipe.id}/`, this.editRecipe, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchRecipes(); this.editRecipe = null; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0430:', error); }); }, deleteRecipe(id) { const token = localStorage.getItem('access_token'); axios.delete(`http://127.0.0.1:8000/api/recipes/${id}`, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchRecipes(); }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0430:', error); }); }, createRecipe() { const token = localStorage.getItem('access_token'); axios.post(`http://127.0.0.1:8000/api/recipes/`, this.newRecipe, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchRecipes(); this.newRecipe = { title: '', preparation_time: 0, cooking_time: 0, difficulty_level: 'E', region: '', is_vegetarian: false }; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0430:', error); }); } } } </script> <style scoped> body { font-family: 'Arial', sans-serif; color: #333; background-color: #f8f8f8; line-height: 1.6; } h1, h2, h3 { color: #4CAF50; } ul { list-style-type: none; padding: 0; } .recipe-list li { background-color: #fff; margin-bottom: 1em; padding: 1em; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); border-radius: 5px; } .recipe-list p, .recipe-list li { font-size: 1em; } .recipe-list p { margin: 5px 0; } .recipe-list p span.label { font-weight: bold; color: #333; margin-right: 5px; } .recipe-list p span.value { color: #555; } button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; } button:hover { background-color: #45a049; } input[type=\"text\"], input[type=\"number\"], select { width: 100%; padding: 10px; margin: 10px 0; display: inline-block; border: 2px solid #ccc; border-radius: 4px; box-sizing: border-box; } .main-container { display: flex; justify-content: space-between; align-items: stretch; height: calc(100vh - 60px); margin-top: 60px; } .recipe-list-container, .form-container { flex: 1; padding: 50px; overflow: auto; } .recipe-list-container { max-width: 50%; } .form-container { max-width: 50%; } input[type=\"checkbox\"] { transform: scale(1.5); margin-left: 10px; border-color: #4CAF50; } </style> \u0422\u0430\u043a\u0436\u0435 \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438. \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0441\u0430\u0439\u0442\u0430. \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0430 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0418\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u044b \u041f\u043e\u0445\u043e\u0436\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430\u043c\u0438 <template> <div> <div class=\"ingredient-list-container\"> <h1>Ingredients List</h1> <ul> <li v-for=\"ingredient in ingredients\" :key=\"ingredient.id\" class=\"ingredient-item\"> <div class=\"ingredient-details\"> {{ ingredient.name }} <br> <span class=\"allergens\">Allergens: {{ ingredient.allergens || 'None' }}</span> <span class=\"vegetarian-status\">Vegetarian: {{ ingredient.is_vegetarian ? 'Yes' : 'No' }}</span> <br> <div class=\"nutritional-value\"> Nutritional Value: Calories: {{ ingredient.nutritional_value.calories }}, Proteins: {{ ingredient.nutritional_value.proteins }}, Carbohydrates: {{ ingredient.nutritional_value.carbohydrates }}, Fats: {{ ingredient.nutritional_value.fats }} </div> </div> <div class=\"ingredient-actions\"> <button @click=\"deleteIngredient(ingredient.id)\">Delete</button> </div> </li> </ul> </div> <div class=\"form-container\"> <h2>Create a New Ingredient</h2> <form @submit.prevent=\"createIngredient\"> <div> <label for=\"newName\">Name:</label> <input id=\"newName\" type=\"text\" v-model=\"newIngredient.name\" required> </div> <div> <label for=\"newAllergens\">Allergens:</label> <input id=\"newAllergens\" type=\"text\" v-model=\"newIngredient.allergens\" required> </div> <div> <label for=\"newIsVegetarian\">Vegetarian:</label> <input id=\"newIsVegetarian\" type=\"checkbox\" v-model=\"newIngredient.is_vegetarian\"> <br> </div> <div> <label for=\"newCalories\">Calories:</label> <input id=\"newCalories\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.calories\" required> </div> <div> <label for=\"newProteins\">Proteins:</label> <input id=\"newProteins\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.proteins\" required> </div> <div> <label for=\"newCarbohydrates\">Carbohydrates:</label> <input id=\"newCarbohydrates\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.carbohydrates\" required> </div> <div> <label for=\"newFats\">Fats:</label> <input id=\"newFats\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.fats\" required> </div> <div> <button type=\"submit\">Add Ingredient</button> </div> </form> </div> </div> </template> <script> import axios from 'axios'; export default { name: 'IngredientsList', data() { return { ingredients: [], newIngredient: { name: '', allergens: '', is_vegetarian: false, nutritional_value: {calories: 0, proteins: 0, carbohydrates: 0, fats: 0} } } }, created() { this.fetchIngredients(); }, methods: { fetchIngredients() { const token = localStorage.getItem('access_token'); axios.get('http://127.0.0.1:8000/api/ingredients/', { headers: { 'Authorization': `Token ${token}` } }) .then(response => { this.ingredients = response.data; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432:', error); }); }, createIngredient() { const token = localStorage.getItem('access_token'); axios.post('http://127.0.0.1:8000/api/ingredients/', this.newIngredient, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchIngredients(); this.newIngredient = { name: '', allergens: '', is_vegetarian: false, nutritional_value: {calories: 0, proteins: 0, carbohydrates: 0, fats: 0} }; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430:', error); }); }, deleteIngredient(ingredientId) { const token = localStorage.getItem('access_token'); axios.delete(`http://127.0.0.1:8000/api/ingredients/${ingredientId}`, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchIngredients(); // Refresh the list after deletion }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430:', error); }); } } } </script> <style scoped> body { font-family: 'Arial', sans-serif; color: #333; background-color: #f8f8f8; line-height: 1.6; } h1, h2, h3 { color: #4CAF50; text-align: center; } .ingredient-list-container ul { list-style: none; padding: 0; margin: 0 auto; max-width: 800px; } .ingredient-item { display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px; } li { background-color: #fff; margin-bottom: 1em; padding: 1em; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); border-radius: 5px; line-height: 1.5; } .allergens, .vegetarian-status, .nutritional-value { display: inline-block; margin-right: 15px; } .vegetarian-status { color: #4CAF50; } .allergens { color: #E53935; } button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; } button:hover { background-color: #45a049; } input[type=\"text\"], input[type=\"number\"], select { width: 100%; padding: 10px; margin: 10px 0; display: inline-block; border: 2px solid #ccc; border-radius: 4px; box-sizing: border-box; } label[for=\"newIsVegetarian\"] { margin-right: 10px; } input[type=\"checkbox\"] { transform: scale(1.5); margin-right: 5px; border-color: #4CAF50; } </style> \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434: \u041e\u0431\u0449\u0435\u0435 \u041d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0448\u0430\u043f\u043a\u0443 \u0441\u0430\u0439\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u0438\u0434\u043d\u043e \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0435\u043c \u0432\u0438\u0434\u0435 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c App.vue \u0438 main.js App.vue <template> <div id=\"app\"> <header v-if=\"showHeader\"> <NavigationMenu /> </header> <RouterView /> </div> </template> <script setup> import { computed } from 'vue'; import { useRoute } from 'vue-router'; import NavigationMenu from \"@/components/NavigationMenu.vue\"; const route = useRoute(); const showHeader = computed(() => { return route.path !== '/login' && route.path !== '/register'; }); </script> <style scoped> .main-container { display: flex; justify-content: space-between; /* Adjust as needed */ padding: 20px; } .recipe-container, .form-container { flex: 1; padding: 10px; } </style> NavigationMenu <template> <nav> <ul> <li><router-link to=\"/\">Main</router-link></li> <li><router-link to=\"/ingredients\">Ingredients</router-link></li> <li><router-link to=\"/recipes\">Recipes</router-link></li> <li><button @click=\"logout\">Log out</button></li> </ul> </nav> </template> <script> export default { name: 'NavigationMenu', methods: { logout() { console.log('Token before logout:', localStorage.getItem('access_token')); localStorage.removeItem('access_token'); console.log('Token after logout:', localStorage.getItem('access_token')); this.$router.push('/login'); } } } </script> <style scoped> button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; } nav { width: 100%; background-color: #f8f8f8; /* Choose a color that fits your design */ box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); position: fixed; top: 0; left: 0; z-index: 1000; } nav ul { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 50px; /* Adjust height as needed */ } nav ul li { margin: 0 10px; } </style> main.js import './assets/main.css' import { createApp } from 'vue' import App from './App.vue' //import router from './router' import LoginPage from \"./components/LoginPage.vue\"; import {createRouter, createWebHistory} from \"vue-router\"; import axios from 'axios'; import RegisterPage from \"@/components/RegisterPage.vue\"; import IngredientsList from \"@/components/IngredientsList.vue\"; import HomePage from \"@/components/HomePage.vue\"; import RecipeList from \"@/components/RecipeList.vue\"; const app = createApp(App) const router = createRouter({ history: createWebHistory(), routes: [ { path: '/', component: HomePage }, { path: '/login', component: LoginPage }, { path: '/register', component: RegisterPage }, { path: '/ingredients', component: IngredientsList }, { path: '/recipes', component: RecipeList }, ] }); app.use(router) app.mount('#app') \u0412\u044b\u0432\u043e\u0434 \u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f4"},{"location":"Lab4/#no4","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21164"},{"location":"Lab4/#_1","text":"\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"Lab4/#_2","text":"\u042f \u0434\u0435\u043b\u0430\u043b \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u044f\u043c\u0438. \u0418\u0434\u0435\u044f \u0441\u0430\u0439\u0442\u0430: \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e + \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u044b \u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432 \u0438 \u0441\u043e\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u043b\u0430\u043d\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u0432 3 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439","title":"\u0421\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c"},{"location":"Lab4/#_3","text":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0432\u0445\u043e\u0434 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0441\u043e\u0431\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0433\u0434\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e\u0442\u043e\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0435\u043c\u0443 \u0432\u044b\u0434\u0430\u0435\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d. \u041d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u0438\u044f\u0442\u043d\u043e\u0433\u043e \u0432\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0432\u0438\u0434\u0430. <template> <div> <h2>Registration</h2> <form @submit.prevent=\"register\"> <div> <label for=\"username\">Username:</label> <input id=\"username\" v-model=\"user.username\" type=\"text\" required> </div> <div> <label for=\"email\">Email:</label> <input id=\"email\" v-model=\"user.email\" type=\"email\" required> </div> <div> <label for=\"password\">Password:</label> <input id=\"password\" v-model=\"user.password\" type=\"password\" required> </div> <button type=\"submit\">Register</button> <router-link to=\"/login\">Log in</router-link> </form> </div> </template> <script> import axios from 'axios'; export default { name: 'RegisterPage', data() { return { user: { username: '', email: '', password: '' } } }, methods: { async register() { try { const response = await axios.post('http://127.0.0.1:8000/auth/users/', this.user); console.log('Registration successful', response.data); const response_login = await axios.post('http://127.0.0.1:8000/auth/token/login/', { username: this.user.username, password: this.user.password, }); const accessToken = response_login.data.auth_token; localStorage.setItem('access_token', accessToken); console.log('Login successful. Token:', accessToken); this.$router.push('/'); } catch (error) { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:', error.response.data); } } } } </script> <style scoped> .container { max-width: 400px; margin: 0 auto; padding: 20px; text-align: center; } h2 { color: #333; font-size: 2em; margin-bottom: 20px; } form { display: flex; flex-direction: column; align-items: center; } label { margin-bottom: 5px; } input { margin-bottom: 10px; padding: 10px; font-size: 1em; } button { background-color: #3bbc55; color: #ffffff; padding: 10px; border: none; cursor: pointer; font-size: 1em; border-radius: 4px; } </style> <template> <div> <h2>Log in</h2> <form @submit.prevent=\"login\"> <div> <label for=\"username\">Uername:</label> <input id=\"username\" v-model=\"username\" type=\"text\" required> </div> <div> <label for=\"password\">Password:</label> <input id=\"password\" v-model=\"password\" type=\"password\" required> </div> <button type=\"submit\">Log in</button> <router-link to=\"/register\">Register</router-link> </form> </div> </template> <script> import axios from 'axios'; export default { name: 'LoginPage', data() { return { username: '', password: '' } }, methods: { async login() { try { const response = await axios.post('http://127.0.0.1:8000/auth/token/login/', { username: this.username, password: this.password, }); const accessToken = response.data.auth_token; localStorage.setItem('access_token', accessToken); console.log('Login successful. Token:', accessToken); this.$router.push('/'); } catch (error) { console.error('Login failed:', error.response.data); } } } } </script> <style scoped> .container { max-width: 400px; margin: 0 auto; padding: 20px; text-align: center; } h2 { color: #333; font-size: 2em; margin-bottom: 20px; } form { display: flex; flex-direction: column; align-items: center; } label { margin-bottom: 5px; } input { margin-bottom: 10px; padding: 10px; font-size: 1em; } button { background-color: #3bbc55; color: #ffffff; padding: 10px; border: none; cursor: pointer; font-size: 1em; border-radius: 4px; } </style> \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430:","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0438 \u0432\u0445\u043e\u0434"},{"location":"Lab4/#_4","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0440\u0435\u0446\u0435\u043f\u0442\u0430\u043c\u0438 \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439, \u0442.\u043a. \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0432\u0435 \u0444\u043e\u0440\u043c\u044b \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432, \u0438\u0437-\u0437\u0430 \u0447\u0435\u0433\u043e \u043a\u043e\u0434 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434 500 \u0441\u0442\u0440\u043e\u0447\u0435\u043a <template> <div class = \"main-container\"> <div class = \"recipe-list-container\"> <h1>Recipes</h1> <ul class=\"recipe-list\"> <li v-for=\"recipe in recipes\" :key=\"recipe.id\"> <h2>{{ recipe.title }}</h2> <p><span class=\"label\">Preparation Time:</span> <span class=\"value\">{{ recipe.preparation_time }} min</span></p> <p><span class=\"label\">Cooking Time:</span> <span class=\"value\">{{ recipe.cooking_time }} min</span></p> <p><span class=\"label\">Difficulty:</span> <span class=\"value\">{{ recipe.difficulty_level }}</span></p> <p><span class=\"label\">Region:</span> <span class=\"value\">{{ recipe.region }}</span></p> <p><span class=\"label\">Vegetarian:</span> <span class=\"value\">{{ recipe.is_vegetarian ? 'Yes' : 'No' }}</span></p> <br><br> <div v-if=\"recipe.ingredients.length\"> <h3>Ingredients:</h3> <ul> <li v-for=\"ingredient in recipe.ingredients\" :key=\"ingredient.id\"> <span class=\"value\">{{ ingredient.ingredient.name }}</span> - <span class=\"value\">{{ ingredient.quantity }}</span> </li> </ul> </div> <div v-if=\"recipe.tools.length\"> <h3>Tools:</h3> <ul> <li v-for=\"tool in recipe.tools\" :key=\"tool.id\"> <span class=\"value\">{{ tool.tool.name }}</span> </li> </ul> </div> <br> <button @click=\"deleteRecipe(recipe.id)\">Delete</button> <button @click=\"startEdit(recipe)\">Edit</button> </li> </ul> <div v-if=\"editRecipe\"> <h2>Recipe Edition: {{ editRecipe.title }}</h2> <form @submit.prevent=\"updateRecipe\"> <div> <label for=\"editTitle\">Title:</label> <input id=\"editTitle\" type=\"text\" v-model=\"editRecipe.title\" required> </div> <div> <label for=\"editPreparationTime\">Preparation Time (in minutes):</label> <input id=\"editPreparationTime\" type=\"number\" v-model=\"editRecipe.preparation_time\" required> </div> <div> <label for=\"editCookingTime\">Cooking Time (in minutes):</label> <input id=\"editCookingTime\" type=\"number\" v-model=\"editRecipe.cooking_time\" required> </div> <div> <label for=\"editDifficulty\">Difficulty:</label> <select id=\"editDifficulty\" v-model=\"editRecipe.difficulty_level\" required> <option value=\"E\">Easy</option> <option value=\"M\">Medium</option> <option value=\"H\">Hard</option> </select> </div> <div> <label for=\"editRegion\">Region:</label> <input id=\"editRegion\" type=\"text\" v-model=\"editRecipe.region\"> </div> <div> <label for=\"editVegetarian\">Vegetarian:</label> <input id=\"editVegetarian\" type=\"checkbox\" v-model=\"editRecipe.is_vegetarian\"> </div> <h3>Ingredients:</h3> <ul> <li v-for=\"(ingredient, index) in editRecipe.ingredients\" :key=\"ingredient.id\"> {{ ingredient.ingredient.name }} - <input type=\"text\" v-model=\"ingredient.quantity\"> <button @click=\"removeIngredient(index)\">Remove</button> </li> </ul> <div> <select v-model=\"newIngredientId\"> <option v-for=\"ingredient in ingredients\" :value=\"ingredient.id\">{{ ingredient.name }}</option> </select> <input type=\"text\" v-model=\"newIngredientQuantity\" placeholder=\"Quantity\"> <button @click=\"addIngredient\">Add Ingredient</button> </div> <button type=\"submit\">Update Recipe</button> <button @click=\"cancelEdit\">Cancel</button> </form> </div> </div> <div class=\"form-container\"> <h2>Create a New Recipe</h2> <form @submit.prevent=\"createRecipe\"> <div> <label for=\"newTitle\">Title:</label> <input id=\"newTitle\" type=\"text\" v-model=\"newRecipe.title\" required> </div> <div> <label for=\"newPreparationTime\">Preparation Time (in minutes):</label> <input id=\"newPreparationTime\" type=\"number\" v-model=\"newRecipe.preparation_time\" required> </div> <div> <label for=\"newCookingTime\">Cooking Time (in minutes):</label> <input id=\"newCookingTime\" type=\"number\" v-model=\"newRecipe.cooking_time\" required> </div> <div> <label for=\"newDifficulty\">Difficulty:</label> <select id=\"newDifficulty\" v-model=\"newRecipe.difficulty_level\" required> <option value=\"E\">Easy</option> <option value=\"M\">Medium</option> <option value=\"H\">Hard</option> </select> </div> <div> <label for=\"newRegion\">Region:</label> <input id=\"newRegion\" type=\"text\" v-model=\"newRecipe.region\"> </div> <div> <label for=\"newVegetarian\">Vegetarian:</label> <input id=\"newVegetarian\" type=\"checkbox\" v-model=\"newRecipe.is_vegetarian\"> </div> <br> <button type=\"submit\">Create Recipe</button> </form> </div> </div> </template> <script> import axios from 'axios'; export default { name: \"RecipeList\", data() { return { recipes: [], editRecipe: null, newRecipe: { title: '', preparation_time: 0, cooking_time: 0, difficulty_level: 'E', region: '', is_vegetarian: false, ingredients: [] }, newIngredientId: null, newIngredientQuantity: '', ingredients: [] } }, created() { this.fetchRecipes(); this.fetchIngredients(); }, methods: { addIngredient(event) { event.preventDefault(); const ingredientToAdd = this.ingredients.find(ing => ing.id === this.newIngredientId); if (ingredientToAdd) { this.editRecipe.ingredients.push({ ingredient: ingredientToAdd, quantity: this.newIngredientQuantity }); this.newIngredientId = null; this.newIngredientQuantity = ''; } }, removeIngredient(index) { this.editRecipe.ingredients.splice(index, 1); }, fetchIngredients() { const token = localStorage.getItem('access_token'); axios.get('http://127.0.0.1:8000/api/ingredients/', { headers: { 'Authorization': `Token ${token}` } }) .then(response => { this.ingredients = response.data; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432:', error); }); }, fetchRecipes() { const token = localStorage.getItem('access_token'); axios.get('http://127.0.0.1:8000/api/recipes/', { headers: { 'Authorization': `Token ${token}` } }) .then(response => { this.recipes = response.data; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u043e\u0432:', error); }) }, startEdit(recipe) { this.editRecipe = {...recipe}; }, cancelEdit() { this.editRecipe = null; }, updateRecipe() { const token = localStorage.getItem('access_token'); axios.patch(`http://127.0.0.1:8000/api/recipes/${this.editRecipe.id}/`, this.editRecipe, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchRecipes(); this.editRecipe = null; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0430:', error); }); }, deleteRecipe(id) { const token = localStorage.getItem('access_token'); axios.delete(`http://127.0.0.1:8000/api/recipes/${id}`, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchRecipes(); }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0430:', error); }); }, createRecipe() { const token = localStorage.getItem('access_token'); axios.post(`http://127.0.0.1:8000/api/recipes/`, this.newRecipe, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchRecipes(); this.newRecipe = { title: '', preparation_time: 0, cooking_time: 0, difficulty_level: 'E', region: '', is_vegetarian: false }; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0446\u0435\u043f\u0442\u0430:', error); }); } } } </script> <style scoped> body { font-family: 'Arial', sans-serif; color: #333; background-color: #f8f8f8; line-height: 1.6; } h1, h2, h3 { color: #4CAF50; } ul { list-style-type: none; padding: 0; } .recipe-list li { background-color: #fff; margin-bottom: 1em; padding: 1em; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); border-radius: 5px; } .recipe-list p, .recipe-list li { font-size: 1em; } .recipe-list p { margin: 5px 0; } .recipe-list p span.label { font-weight: bold; color: #333; margin-right: 5px; } .recipe-list p span.value { color: #555; } button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; } button:hover { background-color: #45a049; } input[type=\"text\"], input[type=\"number\"], select { width: 100%; padding: 10px; margin: 10px 0; display: inline-block; border: 2px solid #ccc; border-radius: 4px; box-sizing: border-box; } .main-container { display: flex; justify-content: space-between; align-items: stretch; height: calc(100vh - 60px); margin-top: 60px; } .recipe-list-container, .form-container { flex: 1; padding: 50px; overflow: auto; } .recipe-list-container { max-width: 50%; } .form-container { max-width: 50%; } input[type=\"checkbox\"] { transform: scale(1.5); margin-left: 10px; border-color: #4CAF50; } </style> \u0422\u0430\u043a\u0436\u0435 \u043d\u0435 \u0437\u0430\u0431\u044b\u0432\u0430\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0438\u043b\u0438. \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434 \u0441\u0430\u0439\u0442\u0430. \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0430 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e","title":"\u0420\u0435\u0446\u0435\u043f\u0442\u044b"},{"location":"Lab4/#_5","text":"\u041f\u043e\u0445\u043e\u0436\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0434\u0435\u043b\u0430\u0435\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430\u043c\u0438 <template> <div> <div class=\"ingredient-list-container\"> <h1>Ingredients List</h1> <ul> <li v-for=\"ingredient in ingredients\" :key=\"ingredient.id\" class=\"ingredient-item\"> <div class=\"ingredient-details\"> {{ ingredient.name }} <br> <span class=\"allergens\">Allergens: {{ ingredient.allergens || 'None' }}</span> <span class=\"vegetarian-status\">Vegetarian: {{ ingredient.is_vegetarian ? 'Yes' : 'No' }}</span> <br> <div class=\"nutritional-value\"> Nutritional Value: Calories: {{ ingredient.nutritional_value.calories }}, Proteins: {{ ingredient.nutritional_value.proteins }}, Carbohydrates: {{ ingredient.nutritional_value.carbohydrates }}, Fats: {{ ingredient.nutritional_value.fats }} </div> </div> <div class=\"ingredient-actions\"> <button @click=\"deleteIngredient(ingredient.id)\">Delete</button> </div> </li> </ul> </div> <div class=\"form-container\"> <h2>Create a New Ingredient</h2> <form @submit.prevent=\"createIngredient\"> <div> <label for=\"newName\">Name:</label> <input id=\"newName\" type=\"text\" v-model=\"newIngredient.name\" required> </div> <div> <label for=\"newAllergens\">Allergens:</label> <input id=\"newAllergens\" type=\"text\" v-model=\"newIngredient.allergens\" required> </div> <div> <label for=\"newIsVegetarian\">Vegetarian:</label> <input id=\"newIsVegetarian\" type=\"checkbox\" v-model=\"newIngredient.is_vegetarian\"> <br> </div> <div> <label for=\"newCalories\">Calories:</label> <input id=\"newCalories\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.calories\" required> </div> <div> <label for=\"newProteins\">Proteins:</label> <input id=\"newProteins\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.proteins\" required> </div> <div> <label for=\"newCarbohydrates\">Carbohydrates:</label> <input id=\"newCarbohydrates\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.carbohydrates\" required> </div> <div> <label for=\"newFats\">Fats:</label> <input id=\"newFats\" type=\"number\" v-model.number=\"newIngredient.nutritional_value.fats\" required> </div> <div> <button type=\"submit\">Add Ingredient</button> </div> </form> </div> </div> </template> <script> import axios from 'axios'; export default { name: 'IngredientsList', data() { return { ingredients: [], newIngredient: { name: '', allergens: '', is_vegetarian: false, nutritional_value: {calories: 0, proteins: 0, carbohydrates: 0, fats: 0} } } }, created() { this.fetchIngredients(); }, methods: { fetchIngredients() { const token = localStorage.getItem('access_token'); axios.get('http://127.0.0.1:8000/api/ingredients/', { headers: { 'Authorization': `Token ${token}` } }) .then(response => { this.ingredients = response.data; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432:', error); }); }, createIngredient() { const token = localStorage.getItem('access_token'); axios.post('http://127.0.0.1:8000/api/ingredients/', this.newIngredient, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchIngredients(); this.newIngredient = { name: '', allergens: '', is_vegetarian: false, nutritional_value: {calories: 0, proteins: 0, carbohydrates: 0, fats: 0} }; }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430:', error); }); }, deleteIngredient(ingredientId) { const token = localStorage.getItem('access_token'); axios.delete(`http://127.0.0.1:8000/api/ingredients/${ingredientId}`, { headers: { 'Authorization': `Token ${token}` } }) .then(() => { this.fetchIngredients(); // Refresh the list after deletion }) .catch(error => { console.error('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u0430:', error); }); } } } </script> <style scoped> body { font-family: 'Arial', sans-serif; color: #333; background-color: #f8f8f8; line-height: 1.6; } h1, h2, h3 { color: #4CAF50; text-align: center; } .ingredient-list-container ul { list-style: none; padding: 0; margin: 0 auto; max-width: 800px; } .ingredient-item { display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px; } li { background-color: #fff; margin-bottom: 1em; padding: 1em; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); border-radius: 5px; line-height: 1.5; } .allergens, .vegetarian-status, .nutritional-value { display: inline-block; margin-right: 15px; } .vegetarian-status { color: #4CAF50; } .allergens { color: #E53935; } button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; } button:hover { background-color: #45a049; } input[type=\"text\"], input[type=\"number\"], select { width: 100%; padding: 10px; margin: 10px 0; display: inline-block; border: 2px solid #ccc; border-radius: 4px; box-sizing: border-box; } label[for=\"newIsVegetarian\"] { margin-right: 10px; } input[type=\"checkbox\"] { transform: scale(1.5); margin-right: 5px; border-color: #4CAF50; } </style> \u0412\u043d\u0435\u0448\u043d\u0438\u0439 \u0432\u0438\u0434:","title":"\u0418\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u044b"},{"location":"Lab4/#_6","text":"\u041d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0448\u0430\u043f\u043a\u0443 \u0441\u0430\u0439\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u0438\u0434\u043d\u043e \u043d\u0430 \u0432\u043d\u0435\u0448\u043d\u0435\u043c \u0432\u0438\u0434\u0435 \u0438\u043d\u0433\u0440\u0435\u0434\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c App.vue \u0438 main.js","title":"\u041e\u0431\u0449\u0435\u0435"},{"location":"Lab4/#appvue","text":"<template> <div id=\"app\"> <header v-if=\"showHeader\"> <NavigationMenu /> </header> <RouterView /> </div> </template> <script setup> import { computed } from 'vue'; import { useRoute } from 'vue-router'; import NavigationMenu from \"@/components/NavigationMenu.vue\"; const route = useRoute(); const showHeader = computed(() => { return route.path !== '/login' && route.path !== '/register'; }); </script> <style scoped> .main-container { display: flex; justify-content: space-between; /* Adjust as needed */ padding: 20px; } .recipe-container, .form-container { flex: 1; padding: 10px; } </style>","title":"App.vue"},{"location":"Lab4/#navigationmenu","text":"<template> <nav> <ul> <li><router-link to=\"/\">Main</router-link></li> <li><router-link to=\"/ingredients\">Ingredients</router-link></li> <li><router-link to=\"/recipes\">Recipes</router-link></li> <li><button @click=\"logout\">Log out</button></li> </ul> </nav> </template> <script> export default { name: 'NavigationMenu', methods: { logout() { console.log('Token before logout:', localStorage.getItem('access_token')); localStorage.removeItem('access_token'); console.log('Token after logout:', localStorage.getItem('access_token')); this.$router.push('/login'); } } } </script> <style scoped> button { background-color: #4CAF50; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; } nav { width: 100%; background-color: #f8f8f8; /* Choose a color that fits your design */ box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); position: fixed; top: 0; left: 0; z-index: 1000; } nav ul { margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 50px; /* Adjust height as needed */ } nav ul li { margin: 0 10px; } </style>","title":"NavigationMenu"},{"location":"Lab4/#mainjs","text":"import './assets/main.css' import { createApp } from 'vue' import App from './App.vue' //import router from './router' import LoginPage from \"./components/LoginPage.vue\"; import {createRouter, createWebHistory} from \"vue-router\"; import axios from 'axios'; import RegisterPage from \"@/components/RegisterPage.vue\"; import IngredientsList from \"@/components/IngredientsList.vue\"; import HomePage from \"@/components/HomePage.vue\"; import RecipeList from \"@/components/RecipeList.vue\"; const app = createApp(App) const router = createRouter({ history: createWebHistory(), routes: [ { path: '/', component: HomePage }, { path: '/login', component: LoginPage }, { path: '/register', component: RegisterPage }, { path: '/ingredients', component: IngredientsList }, { path: '/recipes', component: RecipeList }, ] }); app.use(router) app.mount('#app')","title":"main.js"},{"location":"Lab4/#_7","text":"\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u044f \u0438\u0437\u0443\u0447\u0438\u043b \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"Practices/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430\u043c \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391 \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e 2 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 Model \u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0440\u0435\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u043e\u0442 \u0442\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c from django.contrib.auth.models import AbstractUser from django.db import models from django.conf import settings class CarOwner(AbstractUser): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) birth_date = models.DateTimeField(null=True, blank=True) passport = models.CharField(max_length=25, null=True) address = models.CharField(max_length=100, null=True) nationality = models.CharField(max_length=30, null=True) cars = models.ManyToManyField(\"Car\", through=\"Ownership\") class DrivingLicense(models.Model): owner = models.ForeignKey(CarOwner, on_delete=models.CASCADE) license_number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateTimeField() class Car(models.Model): state_number = models.CharField(max_length=15) brand = models.CharField(max_length=20) model = models.CharField(max_length=20) color = models.CharField(max_length=30, null=True, blank=True) owners = models.ManyToManyField(\"CarOwner\", through=\"Ownership\") class Ownership(models.Model): owner = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateTimeField() end_date = models.DateTimeField(null=True, blank=True) Views from django.shortcuts import render, get_object_or_404, redirect from django.http import Http404 #\u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0431\u0434 (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a) from django.shortcuts import render #\u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \"\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\" \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u0445\u0442\u043c\u043b \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 \u043d\u0435\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b from django.views import View from django.views.generic import CreateView, ListView, DeleteView, DetailView, \\ UpdateView from .forms import CarUpdateForm, OwnerCreateForm, CarCreateForm from .models import CarOwner, Car def index(request): return render(request, \"index.html\") def detail(request, owner_id): try: #\u043c\u0435\u0442\u043e\u0434 try-except - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 p = CarOwner.objects.get(pk=owner_id) #pk - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u0436\u0430\u043d\u0433\u043e \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u043c\u043e\u0434\u0435\u043b\u0435 (\u043e\u043d\u043e \u0435\u0441\u0442\u044c \u0443 \u043b\u044e\u0431\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u0431\u0434), poll_id \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438 \u0435\u0451 \u0432\u044b\u0437\u043e\u0432\u0435. #\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 p \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0433\u043e \"select * from Poll where pk=poll_id\" except CarOwner.DoesNotExist: raise Http404(\"Poll does not exist\") #\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e, \u0435\u0441\u043b\u0438 \u0431\u043b\u043e\u043a try \u0432\u0435\u0440\u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 False (\u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Poll) return render(request, 'owner.html', {'owner': p}) #\u0434\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442 \u0445\u0442\u043c\u043b \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 detail.html \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 \u043d\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \"p\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0445\u0442\u043c\u043b \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \"poll\" def owner_get(request, owner_id): owner = get_object_or_404(CarOwner, pk=owner_id) return render(request, \"owner_get.html\", {\"owner\": owner}) def owner_list(request): owners = CarOwner.objects.all() return render(request, \"owner_list.html\", {\"owners\": owners}) def owner_create(request): match request.method: case \"POST\": form = OwnerCreateForm(request.POST) if form.is_valid(): form.save() return redirect(\"owner_list\") case \"GET\": form = OwnerCreateForm() return render( request, \"owner_create.html\", {\"form\": form} ) case _: return Http404(f\"Method {request.method} not supported\") class CarDetailView(DetailView): model = Car template_name = \"car_detail_view.html\" context_object_name = \"car\" class CarListView(ListView): model = Car template_name = \"car_list_view.html\" context_object_name = \"cars\" class CarCreateView(CreateView): model = Car template_name = \"car_create_view.html\" form_class = CarCreateForm success_url = \"/cars\" class CarUpdateView(UpdateView): model = Car form_class = CarUpdateForm success_url = \"/cars\" template_name = \"car_update_view.html\" class CarDeleteView(DeleteView): model = Car success_url = \"/cars\" template_name = \"car_delete_view.html\" \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2 from django.shortcuts import render from .models import Car, CarOwner, DrivingLicense, Ownership from django.db import models from django.utils import timezone def cars_by_brand(request, brand=\"Toyota\"): cars = Car.objects.filter(brand=brand) return render(request, 'cars_by_brand.html', {'cars': cars}) def drivers_by_name(request, name=\"\u041e\u043b\u0435\u0433\"): drivers = CarOwner.objects.filter(name=name) return render(request, 'drivers_by_name.html', {'drivers': drivers}) def license_by_owner_id(request): random_owner = CarOwner.objects.order_by('?').first() if random_owner: owner_id = random_owner.id license = DrivingLicense.objects.filter(owner_id=owner_id).first() else: license = None return render(request, 'license_by_owner_id.html', {'license': license}) def owners_of_red_cars(request, color=\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\"): owners = CarOwner.objects.filter(cars__color=color).distinct() return render(request, 'owners_of_red_cars.html', {'owners': owners}) def owners_starting_from_year(request, year=2010): owners = Ownership.objects.filter(start_date__year=year).select_related('owner').distinct() return render(request, 'owners_starting_from_year.html', {'owners': owners}) \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3 from django.shortcuts import render from .models import CarOwner, DrivingLicense, Ownership, Car from django.db import models def oldest_license(request): oldest_license = DrivingLicense.objects.earliest('issue_date') return render(request, 'oldest_license.html', {'oldest_license': oldest_license}) def latest_ownership(request): latest_ownership_date = Ownership.objects.filter(car__model__isnull=False).latest('end_date').end_date return render(request, 'latest_ownership.html', {'latest_ownership_date': latest_ownership_date}) def car_count_per_owner(request): owners_with_car_count = CarOwner.objects.annotate(car_count=models.Count('cars')) return render(request, 'car_count_per_owner.html', {'owners_with_car_count': owners_with_car_count}) def car_count_by_brand(request): car_count = Car.objects.values('brand').annotate(count=models.Count('id')) return render(request, 'car_count_by_brand.html', {'car_count': car_count}) def owners_sorted_by_license_issue_date(request): owners_sorted = CarOwner.objects.annotate(earliest_license_issue_date=models.Min('drivinglicense__issue_date')).order_by('earliest_license_issue_date').distinct() return render(request, 'owners_sorted_by_license.html', {'owners_sorted': owners_sorted})","title":"Practices"},{"location":"Practices/#_1","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0410\u043a\u0443\u043b\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439, K33391","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430\u043c"},{"location":"Practices/#2","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e 2 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439"},{"location":"Practices/#model","text":"\u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0442\u0440\u0435\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u043e\u0442 \u0442\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c from django.contrib.auth.models import AbstractUser from django.db import models from django.conf import settings class CarOwner(AbstractUser): surname = models.CharField(max_length=30) name = models.CharField(max_length=30) birth_date = models.DateTimeField(null=True, blank=True) passport = models.CharField(max_length=25, null=True) address = models.CharField(max_length=100, null=True) nationality = models.CharField(max_length=30, null=True) cars = models.ManyToManyField(\"Car\", through=\"Ownership\") class DrivingLicense(models.Model): owner = models.ForeignKey(CarOwner, on_delete=models.CASCADE) license_number = models.CharField(max_length=10) type = models.CharField(max_length=10) issue_date = models.DateTimeField() class Car(models.Model): state_number = models.CharField(max_length=15) brand = models.CharField(max_length=20) model = models.CharField(max_length=20) color = models.CharField(max_length=30, null=True, blank=True) owners = models.ManyToManyField(\"CarOwner\", through=\"Ownership\") class Ownership(models.Model): owner = models.ForeignKey( settings.AUTH_USER_MODEL, on_delete=models.CASCADE) car = models.ForeignKey(Car, on_delete=models.CASCADE) start_date = models.DateTimeField() end_date = models.DateTimeField(null=True, blank=True)","title":"Model"},{"location":"Practices/#views","text":"from django.shortcuts import render, get_object_or_404, redirect from django.http import Http404 #\u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438, \u043a\u043e\u0433\u0434\u0430 \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0431\u0434 (\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u043e\u0448\u0438\u0431\u043e\u043a) from django.shortcuts import render #\u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u0435\u0442\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \"\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\" \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u0443\u044e \u0445\u0442\u043c\u043b \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 \u043d\u0435\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b from django.views import View from django.views.generic import CreateView, ListView, DeleteView, DetailView, \\ UpdateView from .forms import CarUpdateForm, OwnerCreateForm, CarCreateForm from .models import CarOwner, Car def index(request): return render(request, \"index.html\") def detail(request, owner_id): try: #\u043c\u0435\u0442\u043e\u0434 try-except - \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 p = CarOwner.objects.get(pk=owner_id) #pk - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u0434\u0436\u0430\u043d\u0433\u043e \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432 \u043c\u043e\u0434\u0435\u043b\u0435 (\u043e\u043d\u043e \u0435\u0441\u0442\u044c \u0443 \u043b\u044e\u0431\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438\u0437 \u0431\u0434), poll_id \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0438 \u0435\u0451 \u0432\u044b\u0437\u043e\u0432\u0435. #\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 p \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0433\u043e \"select * from Poll where pk=poll_id\" except CarOwner.DoesNotExist: raise Http404(\"Poll does not exist\") #\u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u0432\u0430\u043d\u043e, \u0435\u0441\u043b\u0438 \u0431\u043b\u043e\u043a try \u0432\u0435\u0440\u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 False (\u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0439\u0434\u0435\u043d\u044b \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 Poll) return render(request, 'owner.html', {'owner': p}) #\u0434\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0440\u0435\u043d\u0434\u0435\u0440\u0438\u0442 \u0445\u0442\u043c\u043b \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 detail.html \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0432 \u043d\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442 \"p\", \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u0445\u0442\u043c\u043b \u0448\u0430\u0431\u043b\u043e\u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \"poll\" def owner_get(request, owner_id): owner = get_object_or_404(CarOwner, pk=owner_id) return render(request, \"owner_get.html\", {\"owner\": owner}) def owner_list(request): owners = CarOwner.objects.all() return render(request, \"owner_list.html\", {\"owners\": owners}) def owner_create(request): match request.method: case \"POST\": form = OwnerCreateForm(request.POST) if form.is_valid(): form.save() return redirect(\"owner_list\") case \"GET\": form = OwnerCreateForm() return render( request, \"owner_create.html\", {\"form\": form} ) case _: return Http404(f\"Method {request.method} not supported\") class CarDetailView(DetailView): model = Car template_name = \"car_detail_view.html\" context_object_name = \"car\" class CarListView(ListView): model = Car template_name = \"car_list_view.html\" context_object_name = \"cars\" class CarCreateView(CreateView): model = Car template_name = \"car_create_view.html\" form_class = CarCreateForm success_url = \"/cars\" class CarUpdateView(UpdateView): model = Car form_class = CarUpdateForm success_url = \"/cars\" template_name = \"car_update_view.html\" class CarDeleteView(DeleteView): model = Car success_url = \"/cars\" template_name = \"car_delete_view.html\"","title":"Views"},{"location":"Practices/#3","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 \u043f\u043e 3 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439"},{"location":"Practices/#2_1","text":"from django.shortcuts import render from .models import Car, CarOwner, DrivingLicense, Ownership from django.db import models from django.utils import timezone def cars_by_brand(request, brand=\"Toyota\"): cars = Car.objects.filter(brand=brand) return render(request, 'cars_by_brand.html', {'cars': cars}) def drivers_by_name(request, name=\"\u041e\u043b\u0435\u0433\"): drivers = CarOwner.objects.filter(name=name) return render(request, 'drivers_by_name.html', {'drivers': drivers}) def license_by_owner_id(request): random_owner = CarOwner.objects.order_by('?').first() if random_owner: owner_id = random_owner.id license = DrivingLicense.objects.filter(owner_id=owner_id).first() else: license = None return render(request, 'license_by_owner_id.html', {'license': license}) def owners_of_red_cars(request, color=\"\u043a\u0440\u0430\u0441\u043d\u044b\u0439\"): owners = CarOwner.objects.filter(cars__color=color).distinct() return render(request, 'owners_of_red_cars.html', {'owners': owners}) def owners_starting_from_year(request, year=2010): owners = Ownership.objects.filter(start_date__year=year).select_related('owner').distinct() return render(request, 'owners_starting_from_year.html', {'owners': owners})","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"Practices/#3_1","text":"from django.shortcuts import render from .models import CarOwner, DrivingLicense, Ownership, Car from django.db import models def oldest_license(request): oldest_license = DrivingLicense.objects.earliest('issue_date') return render(request, 'oldest_license.html', {'oldest_license': oldest_license}) def latest_ownership(request): latest_ownership_date = Ownership.objects.filter(car__model__isnull=False).latest('end_date').end_date return render(request, 'latest_ownership.html', {'latest_ownership_date': latest_ownership_date}) def car_count_per_owner(request): owners_with_car_count = CarOwner.objects.annotate(car_count=models.Count('cars')) return render(request, 'car_count_per_owner.html', {'owners_with_car_count': owners_with_car_count}) def car_count_by_brand(request): car_count = Car.objects.values('brand').annotate(count=models.Count('id')) return render(request, 'car_count_by_brand.html', {'car_count': car_count}) def owners_sorted_by_license_issue_date(request): owners_sorted = CarOwner.objects.annotate(earliest_license_issue_date=models.Min('drivinglicense__issue_date')).order_by('earliest_license_issue_date').distinct() return render(request, 'owners_sorted_by_license.html', {'owners_sorted': owners_sorted})","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3"}]}